<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>suzuki on NLP</title><link>https://suzukiiichiro.github.io/authors/suzuki/</link><description>Recent content in suzuki on NLP</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><lastBuildDate>Fri, 24 Oct 2025 19:03:01 +0900</lastBuildDate><atom:link href="https://suzukiiichiro.github.io/authors/suzuki/index.xml" rel="self" type="application/rss+xml"/><item><title>Ｎクイーン問題（８４）Python/Codonで爆速プログラミング１</title><link>https://suzukiiichiro.github.io/posts/2025-10-24-01-n-queens-suzuki/</link><pubDate>Fri, 24 Oct 2025 19:03:01 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2025-10-24-01-n-queens-suzuki/</guid><description>ソースコード 今回の連載 python/codonのソースコードディレクトリはこちら https://github.com/suzukiiichiro/N-Queens/tree/master/13Bit_codon 🧬 Codon 実践ガイド — Pythonを超えるコンパイラ型高速化の道</description></item><item><title>Ｎクイーン問題（８３）Python-codon＆並列処理で高速化 Constellations</title><link>https://suzukiiichiro.github.io/posts/2025-03-11-07-n-queens-suzuki/</link><pubDate>Tue, 11 Mar 2025 15:24:22 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2025-03-11-07-n-queens-suzuki/</guid><description>ソースコード 今回の連載 python/pypy/codonのソースコードディレクトリはこちら https://github.com/suzukiiichiro/N-Queens/tree/master/13Bit_codon インストールなどの構築はこちら Ｎクイーン問題（６</description></item><item><title>Ｎクイーン問題（８２）Python-並列処理で高速化 16Python_carryChain_ProcessPool</title><link>https://suzukiiichiro.github.io/posts/2025-03-11-06-n-queens-suzuki/</link><pubDate>Tue, 11 Mar 2025 15:02:21 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2025-03-11-06-n-queens-suzuki/</guid><description>ソースコード 今回の連載 python/pypy/codonのソースコードディレクトリはこちら https://github.com/suzukiiichiro/N-Queens/tree/master/10Bit_Python インストールなどの構築はこちら Ｎクイーン問題（６</description></item><item><title>Ｎクイーン問題（８１）Python-codonで高速化 15Python_carryChain</title><link>https://suzukiiichiro.github.io/posts/2025-03-11-05-n-queens-suzuki/</link><pubDate>Tue, 11 Mar 2025 14:15:41 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2025-03-11-05-n-queens-suzuki/</guid><description>ソースコード 今回の連載 python/pypy/codonのソースコードディレクトリはこちら https://github.com/suzukiiichiro/N-Queens/tree/master/10Bit_Python インストールなどの構築はこちら Ｎクイーン問題（６</description></item><item><title>Ｎクイーン問題（８０）Python-並列処理で高速化 14Python_NodeLayer_symmetry_ProcessPool</title><link>https://suzukiiichiro.github.io/posts/2025-03-11-04-n-queens-suzuki/</link><pubDate>Tue, 11 Mar 2025 14:12:41 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2025-03-11-04-n-queens-suzuki/</guid><description>ソースコード 今回の連載 python/pypy/codonのソースコードディレクトリはこちら https://github.com/suzukiiichiro/N-Queens/tree/master/10Bit_Python インストールなどの構築はこちら Ｎクイーン問題（６</description></item><item><title>Ｎクイーン問題（７９）Python-codonで高速化 13Python_NodeLayer_symmetry</title><link>https://suzukiiichiro.github.io/posts/2025-03-11-03-n-queens-suzuki/</link><pubDate>Tue, 11 Mar 2025 13:39:35 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2025-03-11-03-n-queens-suzuki/</guid><description>ソースコード 今回の連載 python/pypy/codonのソースコードディレクトリはこちら https://github.com/suzukiiichiro/N-Queens/tree/master/10Bit_Python インストールなどの構築はこちら Ｎクイーン問題（６</description></item><item><title>Ｎクイーン問題（７８）Python-codonで高速化 12Python_NodeLayer_mirror</title><link>https://suzukiiichiro.github.io/posts/2025-03-11-02-n-queens-suzuki/</link><pubDate>Tue, 11 Mar 2025 13:29:56 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2025-03-11-02-n-queens-suzuki/</guid><description>ソースコード 今回の連載 python/pypy/codonのソースコードディレクトリはこちら https://github.com/suzukiiichiro/N-Queens/tree/master/10Bit_Python インストールなどの構築はこちら Ｎクイーン問題（６</description></item><item><title>Ｎクイーン問題（７７）Python-codonで高速化 11Python_NodeLayer</title><link>https://suzukiiichiro.github.io/posts/2025-03-11-01-n-queens-suzuki/</link><pubDate>Tue, 11 Mar 2025 13:12:09 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2025-03-11-01-n-queens-suzuki/</guid><description>ソースコード 今回の連載 python/pypy/codonのソースコードディレクトリはこちら https://github.com/suzukiiichiro/N-Queens/tree/master/10Bit_Python インストールなどの構築はこちら Ｎクイーン問題（６</description></item><item><title>Ｎクイーン問題（７６）Python-並列処理で高速化 10Python_bit_symmetry_ProcessPool</title><link>https://suzukiiichiro.github.io/posts/2025-03-10-05-n-queens-suzuki/</link><pubDate>Mon, 10 Mar 2025 14:52:15 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2025-03-10-05-n-queens-suzuki/</guid><description>ソースコード 今回の連載 python/pypy/codonのソースコードディレクトリはこちら https://github.com/suzukiiichiro/N-Queens/tree/master/10Bit_Python インストールなどの構築はこちら Ｎクイーン問題（６</description></item><item><title>Ｎクイーン問題（７５）Python-並列処理で高速化 09Python_bit_symmetry_ThreadPool</title><link>https://suzukiiichiro.github.io/posts/2025-03-10-04-n-queens-suzuki/</link><pubDate>Mon, 10 Mar 2025 13:04:56 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2025-03-10-04-n-queens-suzuki/</guid><description>ソースコード 今回の連載 python/pypy/codonのソースコードディレクトリはこちら https://github.com/suzukiiichiro/N-Queens/tree/master/10Bit_Python インストールなどの構築はこちら Ｎクイーン問題（６</description></item><item><title>Ｎクイーン問題（７４）Python-codonで高速化 08Python_bit_symmetry</title><link>https://suzukiiichiro.github.io/posts/2025-03-10-03-n-queens-suzuki/</link><pubDate>Mon, 10 Mar 2025 11:58:13 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2025-03-10-03-n-queens-suzuki/</guid><description>ソースコード 今回の連載 python/pypy/codonのソースコードディレクトリはこちら https://github.com/suzukiiichiro/N-Queens/tree/master/10Bit_Python インストールなどの構築はこちら Ｎクイーン問題（６</description></item><item><title>Ｎクイーン問題（７３）Python-codonで高速化 07Python_bit_mirror</title><link>https://suzukiiichiro.github.io/posts/2025-03-10-02-n-queens-suzuki/</link><pubDate>Mon, 10 Mar 2025 11:17:56 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2025-03-10-02-n-queens-suzuki/</guid><description>ソースコード 今回の連載 python/pypy/codonのソースコードディレクトリはこちら https://github.com/suzukiiichiro/N-Queens/tree/master/10Bit_Python インストールなどの構築はこちら Ｎクイーン問題（６</description></item><item><title>Ｎクイーン問題（７２）Python-codonで高速化 06Python_bit_backTrack.py</title><link>https://suzukiiichiro.github.io/posts/2025-03-10-01-n-queens-suzuki/</link><pubDate>Mon, 10 Mar 2025 10:21:39 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2025-03-10-01-n-queens-suzuki/</guid><description>ソースコード 今回の連載 python/pypy/codonのソースコードディレクトリはこちら https://github.com/suzukiiichiro/N-Queens/tree/master/10Bit_Python インストールなどの構築はこちら Ｎクイーン問題（６</description></item><item><title>Ｎクイーン問題（７１）Python-codonで高速化 05Python_optimize</title><link>https://suzukiiichiro.github.io/posts/2025-03-07-01-n-queens-suzuki/</link><pubDate>Fri, 07 Mar 2025 12:42:47 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2025-03-07-01-n-queens-suzuki/</guid><description>ソースコード 今回の連載 python/pypy/codonのソースコードディレクトリはこちら https://github.com/suzukiiichiro/N-Queens/tree/master/10Bit_Python インストールなどの構築はこちら Ｎクイーン問題（６</description></item><item><title>Ｎクイーン問題（７０）Python-codonで高速化 04Python_symmetry</title><link>https://suzukiiichiro.github.io/posts/2025-03-06-02-n-queens-suzuki/</link><pubDate>Thu, 06 Mar 2025 19:02:45 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2025-03-06-02-n-queens-suzuki/</guid><description>ソースコード 今回の連載 python/pypy/codonのソースコードディレクトリはこちら https://github.com/suzukiiichiro/N-Queens/tree/master/10Bit_Python インストールなどの構築はこちら Ｎクイーン問題（６</description></item><item><title>Ｎクイーン問題（６９）Python-codonで高速化 03Python_backTracking</title><link>https://suzukiiichiro.github.io/posts/2025-03-06-01-n-queens-suzuki/</link><pubDate>Thu, 06 Mar 2025 11:19:15 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2025-03-06-01-n-queens-suzuki/</guid><description>ソースコード 今回の連載 python/pypy/codonのソースコードディレクトリはこちら https://github.com/suzukiiichiro/N-Queens/tree/master/10Bit_Python インストールなどの構築はこちら Ｎクイーン問題（６</description></item><item><title>Ｎクイーン問題（６８）Python-codonで高速化 02Python_postFlag</title><link>https://suzukiiichiro.github.io/posts/2025-03-05-03-n-queens-suzuki/</link><pubDate>Wed, 05 Mar 2025 17:19:12 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2025-03-05-03-n-queens-suzuki/</guid><description>ソースコード 今回の連載 python/pypy/codonのソースコードディレクトリはこちら https://github.com/suzukiiichiro/N-Queens/tree/master/10Bit_Python インストールなどの構築はこちら Ｎクイーン問題（６</description></item><item><title>Ｎクイーン問題（６７）Python-codonで高速化 01Python_bluteForce</title><link>https://suzukiiichiro.github.io/posts/2025-03-05-02-n-queens-suzuki/</link><pubDate>Wed, 05 Mar 2025 12:31:19 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2025-03-05-02-n-queens-suzuki/</guid><description>ソースコード 今回の連載 python/pypy/codonのソースコードディレクトリはこちら https://github.com/suzukiiichiro/N-Queens/tree/master/10Bit_Python インストールなどの構築はこちら Ｎクイーン問題（６</description></item><item><title>Ｎクイーン問題（６６） Python-codonで高速化</title><link>https://suzukiiichiro.github.io/posts/2025-03-05-01-n-queens-suzuki/</link><pubDate>Wed, 05 Mar 2025 10:23:11 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2025-03-05-01-n-queens-suzuki/</guid><description>ソースコード 今回の連載 python/pypy/codonのソースコードディレクトリはこちら https://github.com/suzukiiichiro/N-Queens/tree/master/10Bit_Python Ｎクイーン問題 過去記事アーカイブ 【過去記事アーカ</description></item><item><title>Ｎクイーン問題（６５） Ｎ２５を解決！事実上の日本一に</title><link>https://suzukiiichiro.github.io/posts/2024-04-25-01-n-queens-suzuki/</link><pubDate>Thu, 25 Apr 2024 12:33:04 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2024-04-25-01-n-queens-suzuki/</guid><description>【参考リンク】Ｎクイーン問題 過去記事一覧はこちらから エイト・クイーンのプログラムアーカイブ Bash、Lua、C、Java、Python、CU</description></item><item><title>ローグ・クローンII日本語版について</title><link>https://suzukiiichiro.github.io/posts/2024-04-11-01-rogue-suzuki/</link><pubDate>Thu, 11 Apr 2024 14:39:59 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2024-04-11-01-rogue-suzuki/</guid><description>Rogue Clone II このページは、本作品「ローグ・クローンII日本語版」についての説明となります。 「ローグ・クローンII日本語版」 全ソースコード https://github.com/suzukiiichiro/Rogue2.Official 本作品「</description></item><item><title>Ｎクイーン問題（６４）第七章 並列処理 キャリーチェーン ＮＶＩＤＩＡ ＣＵＤＡ編</title><link>https://suzukiiichiro.github.io/posts/2023-08-01-05-n-queens-suzuki/</link><pubDate>Tue, 01 Aug 2023 10:18:28 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2023-08-01-05-n-queens-suzuki/</guid><description>【参考リンク】Ｎクイーン問題 過去記事一覧はこちらから エイト・クイーンのプログラムアーカイブ Bash、Lua、C、Java、Python、CU</description></item><item><title>Ｎクイーン問題（６３）第七章 並列処理 対称解除法 ビットボード ＮＶＩＤＩＡ ＣＵＤＡ編</title><link>https://suzukiiichiro.github.io/posts/2023-08-01-04-n-queens-suzuki/</link><pubDate>Tue, 01 Aug 2023 10:12:16 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2023-08-01-04-n-queens-suzuki/</guid><description>【参考リンク】Ｎクイーン問題 過去記事一覧はこちらから エイト・クイーンのプログラムアーカイブ Bash、Lua、C、Java、Python、CU</description></item><item><title>Ｎクイーン問題（６２）第七章 並列処理 対称解除法 ノードレイヤー ＮＶＩＤＩＡ ＣＵＤＡ編</title><link>https://suzukiiichiro.github.io/posts/2023-08-01-03-n-queens-suzuki/</link><pubDate>Tue, 01 Aug 2023 10:08:17 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2023-08-01-03-n-queens-suzuki/</guid><description>【参考リンク】Ｎクイーン問題 過去記事一覧はこちらから エイト・クイーンのプログラムアーカイブ Bash、Lua、C、Java、Python、CU</description></item><item><title>Ｎクイーン問題（６１）第七章 並列処理 ミラー ＮＶＩＤＩＡ ＣＵＤＡ編</title><link>https://suzukiiichiro.github.io/posts/2023-08-01-02-n-queens-suzuki/</link><pubDate>Tue, 01 Aug 2023 10:03:47 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2023-08-01-02-n-queens-suzuki/</guid><description>【参考リンク】Ｎクイーン問題 過去記事一覧はこちらから エイト・クイーンのプログラムアーカイブ Bash、Lua、C、Java、Python、CU</description></item><item><title>Ｎクイーン問題（６０）第七章 並列処理 ビットマップ ＮＶＩＤＩＡ ＣＵＤＡ編</title><link>https://suzukiiichiro.github.io/posts/2023-08-01-01-n-queens-suzuki/</link><pubDate>Tue, 01 Aug 2023 09:53:32 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2023-08-01-01-n-queens-suzuki/</guid><description>【参考リンク】Ｎクイーン問題 過去記事一覧はこちらから エイト・クイーンのプログラムアーカイブ Bash、Lua、C、Java、Python、CU</description></item><item><title>Ｎクイーン問題（５９）第六章 並列処理 pthread C言語編</title><link>https://suzukiiichiro.github.io/posts/2023-06-28-09-n-queens-suzuki/</link><pubDate>Wed, 28 Jun 2023 15:14:03 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2023-06-28-09-n-queens-suzuki/</guid><description>【参考リンク】Ｎクイーン問題 過去記事一覧はこちらから エイト・クイーンのプログラムアーカイブ Bash、Lua、C、Java、Python、CU</description></item><item><title>Ｎクイーン問題（５８）第八章 キャリーチェーン C言語編</title><link>https://suzukiiichiro.github.io/posts/2023-06-28-08-n-queens-suzuki/</link><pubDate>Wed, 28 Jun 2023 14:55:08 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2023-06-28-08-n-queens-suzuki/</guid><description>【参考リンク】Ｎクイーン問題 過去記事一覧はこちらから エイト・クイーンのソース置き場 BashもJavaもPythonも！ キャリーチェーン キャリ</description></item><item><title>Ｎクイーン問題（５７）第八章 対称解除法 C言語編</title><link>https://suzukiiichiro.github.io/posts/2023-06-28-07-n-queens-suzuki/</link><pubDate>Wed, 28 Jun 2023 14:31:36 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2023-06-28-07-n-queens-suzuki/</guid><description>【参考リンク】Ｎクイーン問題 過去記事一覧はこちらから エイト・クイーンのソース置き場 BashもJavaもPythonも！ 対象解除法について まず</description></item><item><title>Ｎクイーン問題（５６）第八章 ミラー C言語編</title><link>https://suzukiiichiro.github.io/posts/2023-06-28-06-n-queens-suzuki/</link><pubDate>Wed, 28 Jun 2023 13:44:03 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2023-06-28-06-n-queens-suzuki/</guid><description>【参考リンク】Ｎクイーン問題 過去記事一覧はこちらから エイト・クイーンのソース置き場 BashもJavaもPythonも！ ミラー ミラー（鏡像）を</description></item><item><title>Ｎクイーン問題（５５）第八章 ビットマップ C言語編</title><link>https://suzukiiichiro.github.io/posts/2023-06-28-05-n-queens-suzuki/</link><pubDate>Wed, 28 Jun 2023 13:12:58 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2023-06-28-05-n-queens-suzuki/</guid><description>【参考リンク】Ｎクイーン問題 過去記事一覧はこちらから エイト・クイーンのソース置き場 BashもJavaもPythonも！ ビットマップ Ｎ×Ｎのチ</description></item><item><title>Ｎクイーン問題（５４）第八章 ビットマップ C言語編</title><link>https://suzukiiichiro.github.io/posts/2023-06-28-04-n-queens-suzuki/</link><pubDate>Wed, 28 Jun 2023 12:43:41 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2023-06-28-04-n-queens-suzuki/</guid><description>【参考リンク】Ｎクイーン問題 過去記事一覧はこちらから エイト・クイーンのソース置き場 BashもJavaもPythonも！ ビットマップ ソースコー</description></item><item><title>Ｎクイーン問題（５３）第八章 配置フラグ C言語編</title><link>https://suzukiiichiro.github.io/posts/2023-06-28-03-n-queens-suzuki/</link><pubDate>Wed, 28 Jun 2023 11:47:20 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2023-06-28-03-n-queens-suzuki/</guid><description>【参考リンク】Ｎクイーン問題 過去記事一覧はこちらから エイト・クイーンのソース置き場 BashもJavaもPythonも！ 配置フラグ N-Quee</description></item><item><title>Ｎクイーン問題（５２）第八章 バックトラック C言語編</title><link>https://suzukiiichiro.github.io/posts/2023-06-28-02-n-queens-suzuki/</link><pubDate>Wed, 28 Jun 2023 11:38:03 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2023-06-28-02-n-queens-suzuki/</guid><description>【参考リンク】Ｎクイーン問題 過去記事一覧はこちらから エイト・クイーンのソース置き場 BashもJavaもPythonも！ バックトラック準備編 こ</description></item><item><title>Ｎクイーン問題（５１）第八章 ブルートフォース C言語編</title><link>https://suzukiiichiro.github.io/posts/2023-06-28-01-n-queens-suzuki/</link><pubDate>Wed, 28 Jun 2023 11:06:13 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2023-06-28-01-n-queens-suzuki/</guid><description>【参考リンク】Ｎクイーン問題 過去記事一覧はこちらから エイト・クイーンのソース置き場 BashもJavaもPythonも！ あらためて 実はこのシリ</description></item><item><title>Ｎクイーン問題（５０）第七章 マルチプロセス Python編</title><link>https://suzukiiichiro.github.io/posts/2023-06-21-04-n-queens-suzuki/</link><pubDate>Wed, 21 Jun 2023 12:12:32 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2023-06-21-04-n-queens-suzuki/</guid><description>【参考リンク】Ｎクイーン問題 過去記事一覧はこちらから エイト・クイーンのソース置き場 BashもJavaもPythonも！ マルチプロセス まずはB</description></item><item><title>Ｎクイーン問題（４９）第七章 マルチスレッド Python編</title><link>https://suzukiiichiro.github.io/posts/2023-06-21-03-n-queens-suzuki/</link><pubDate>Wed, 21 Jun 2023 11:44:12 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2023-06-21-03-n-queens-suzuki/</guid><description>【参考リンク】Ｎクイーン問題 過去記事一覧はこちらから エイト・クイーンのソース置き場 BashもJavaもPythonも！ マルチスレッド やってき</description></item><item><title>Ｎクイーン問題（４８）第七章 シングルスレッド Python編</title><link>https://suzukiiichiro.github.io/posts/2023-06-21-02-n-queens-suzuki/</link><pubDate>Wed, 21 Jun 2023 11:23:16 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2023-06-21-02-n-queens-suzuki/</guid><description>【参考リンク】Ｎクイーン問題 過去記事一覧はこちらから エイト・クイーンのソース置き場 BashもJavaもPythonも！ シングルスレッド マルチ</description></item><item><title>Ｎクイーン問題（４７）第七章 クラス Python編</title><link>https://suzukiiichiro.github.io/posts/2023-06-21-01-n-queens-suzuki/</link><pubDate>Wed, 21 Jun 2023 11:09:15 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2023-06-21-01-n-queens-suzuki/</guid><description>【参考リンク】Ｎクイーン問題 過去記事一覧はこちらから エイト・クイーンのソース置き場 BashもJavaもPythonも！ クラス これまで配列（リ</description></item><item><title>Python入門 VisibleDeprecationWarningが出るのですが？</title><link>https://suzukiiichiro.github.io/posts/2023-06-16-03-python-suzuki/</link><pubDate>Fri, 16 Jun 2023 17:18:35 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2023-06-16-03-python-suzuki/</guid><description>VisibleDeprecationWarningが出るのですが？ numpyを使っている際に「配列の行と列がイカレています」ということです。</description></item><item><title>Python入門 ２次元配列を初期化したいのですが？</title><link>https://suzukiiichiro.github.io/posts/2023-06-16-02-python-suzuki/</link><pubDate>Fri, 16 Jun 2023 17:09:27 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2023-06-16-02-python-suzuki/</guid><description>２次元配列を初期化したいのですが？ 一次元配列の初期化 list1 = [1, 2, 3] print(list1) # [1, 2, 3] 一次元配列を０で埋める形で初期化する場合 list1 = [0]* 3 print(list1) # [0, 0, 0] ２次元配列</description></item><item><title>Python入門 Pyhonには「変数の型」はあるのですか？</title><link>https://suzukiiichiro.github.io/posts/2023-06-16-01-python-suzuki/</link><pubDate>Fri, 16 Jun 2023 16:25:41 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2023-06-16-01-python-suzuki/</guid><description>Pythonには「変数の型」はあるのですか？ あります。 色々なプログラミング言語を扱っていると、変数の型を宣言する必要がある言語、ない言語があ</description></item><item><title>Ｎクイーン問題（４６）第七章 ステップＮの実装 Python編</title><link>https://suzukiiichiro.github.io/posts/2023-06-16-02-n-queens-suzuki/</link><pubDate>Fri, 16 Jun 2023 11:05:36 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2023-06-16-02-n-queens-suzuki/</guid><description>【参考リンク】Ｎクイーン問題 過去記事一覧はこちらから エイト・クイーンのソース置き場 BashもJavaもPythonも！ ステップＮの実装 なんで</description></item><item><title>Ｎクイーン問題（４５）第七章 キャリーチェーン Python編</title><link>https://suzukiiichiro.github.io/posts/2023-06-16-01-n-queens-suzuki/</link><pubDate>Fri, 16 Jun 2023 10:52:45 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2023-06-16-01-n-queens-suzuki/</guid><description>【参考リンク】Ｎクイーン問題 過去記事一覧はこちらから エイト・クイーンのソース置き場 BashもJavaもPythonも！ キャリーチェーン キャリ</description></item><item><title>Python入門 配列（リスト）を初期化したいのですが？</title><link>https://suzukiiichiro.github.io/posts/2023-06-15-02-python-suzuki/</link><pubDate>Thu, 15 Jun 2023 10:50:10 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2023-06-15-02-python-suzuki/</guid><description>配列（リスト）を初期化したいのですが？ ここでは配列（リスト）を初期化する方法をまとめる。 リスト（配列）を初期化するには、幾つかの方法がありま</description></item><item><title>Python入門 配列（リスト）をコピーしたいのですが？</title><link>https://suzukiiichiro.github.io/posts/2023-06-15-01-python-suzuki/</link><pubDate>Thu, 15 Jun 2023 10:13:59 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2023-06-15-01-python-suzuki/</guid><description>配列（リスト）をコピーしたいのですが？ できます。 が、しかしコピーには２種類あります。 コピー先 = コピー元 こういった形でコピーしたいとします。 こ</description></item><item><title>Python入門 if文で条件を否定できませんか？</title><link>https://suzukiiichiro.github.io/posts/2023-06-14-01-python-suzuki/</link><pubDate>Wed, 14 Jun 2023 12:58:49 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2023-06-14-01-python-suzuki/</guid><description>if文で条件を否定できませんか？ できます。 例えばBashの場合以下のように条件式を否定することができます。 if (( ! 条件式 ));then : fi このアポストロフ</description></item><item><title>Ｎクイーン問題（４４）第七章　対象解除法 Python編</title><link>https://suzukiiichiro.github.io/posts/2023-06-14-02-n-queens-suzuki/</link><pubDate>Wed, 14 Jun 2023 12:23:13 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2023-06-14-02-n-queens-suzuki/</guid><description>【参考リンク】Ｎクイーン問題 過去記事一覧はこちらから 対象解除法について まず、Ｎが小さな盤面で考えていきます。 以下、順に見て理解を深めてもらえ</description></item><item><title>Ｎクイーン問題（４３）第七章　ミラー Python編</title><link>https://suzukiiichiro.github.io/posts/2023-06-14-01-n-queens-suzuki/</link><pubDate>Wed, 14 Jun 2023 10:42:14 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2023-06-14-01-n-queens-suzuki/</guid><description>【参考リンク】Ｎクイーン問題 過去記事一覧はこちらから ミラー ミラー（鏡像）を用いてどのように改善できるのか Ｎ５＝１０、Ｎ８＝９２といった、N-</description></item><item><title>Python入門 Pythonで三項演算子をつかいたいのですが？</title><link>https://suzukiiichiro.github.io/posts/2023-06-13-07-python-suzuki/</link><pubDate>Tue, 13 Jun 2023 17:52:58 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2023-06-13-07-python-suzuki/</guid><description>Pythonで三項演算子を使いたいのですが？ 使えます。 が、Ｃ言語などのような 真の場合 ? 条件式 : 負の場合 という形式はできません。 以下を見ていた</description></item><item><title>Python入門 割り算の値を切り捨てで扱いたいのですが？</title><link>https://suzukiiichiro.github.io/posts/2023-06-13-06-python-suzuki/</link><pubDate>Tue, 13 Jun 2023 17:50:01 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2023-06-13-06-python-suzuki/</guid><description>割り算の値を切り捨てで扱いたいのですが？ 切り捨て除算といいます。 除算の商の小数でもなく、余りでもなく、整数部分がほしいときはどうすればいいか</description></item><item><title>Python入門 文字列と数値を結合して出力したいのですが？</title><link>https://suzukiiichiro.github.io/posts/2023-06-13-05-python-suzuki/</link><pubDate>Tue, 13 Jun 2023 17:37:06 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2023-06-13-05-python-suzuki/</guid><description>文字列を数値を結合して出力したいのですが？ PythonはBashのように「なんでもあり」という言語ではありません。 これはオッケーです。 pri</description></item><item><title>Ｎクイーン問題（４２）第七章　ビットマップ Python編</title><link>https://suzukiiichiro.github.io/posts/2023-06-13-05-n-queens-suzuki/</link><pubDate>Tue, 13 Jun 2023 14:44:59 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2023-06-13-05-n-queens-suzuki/</guid><description>【参考リンク】Ｎクイーン問題 過去記事一覧はこちらから ビットマップ Ｎ×ＮのチェスボードのＮ個のクイーンの配置を、bitwise(ビット)で表し</description></item><item><title>Ｎクイーン問題（４１）第七章　配置フラグ Python編</title><link>https://suzukiiichiro.github.io/posts/2023-06-13-04-n-queens-suzuki/</link><pubDate>Tue, 13 Jun 2023 13:53:20 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2023-06-13-04-n-queens-suzuki/</guid><description>【参考リンク】Ｎクイーン問題 過去記事一覧はこちらから 第２章 エイトクイーン 配置フラグ 国内で最もきちんと説明していると（僕が勝手に）思っているＵ</description></item><item><title>Ｎクイーン問題（４０）第七章　バックトラック Python編</title><link>https://suzukiiichiro.github.io/posts/2023-06-13-03-n-queens-suzuki/</link><pubDate>Tue, 13 Jun 2023 13:42:53 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2023-06-13-03-n-queens-suzuki/</guid><description>【参考リンク】Ｎクイーン問題 過去記事一覧はこちらから バックトラック 前回の「ブルートフォース（力まかせ探索）」では、Ｎ個のクイーン配置が完了し</description></item><item><title>Ｎクイーン問題（３９）第七章　バックトラック準備編 Python編</title><link>https://suzukiiichiro.github.io/posts/2023-06-13-02-n-queens-suzuki/</link><pubDate>Tue, 13 Jun 2023 13:27:34 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2023-06-13-02-n-queens-suzuki/</guid><description>【参考リンク】Ｎクイーン問題 過去記事一覧はこちらから 前回までのあらすじ 前回の記事では、エイトクイーンの３つのルール １．縦に一つだけのクイーン</description></item><item><title>Ｎクイーン問題（３８）第七章　ブルートフォース Python編</title><link>https://suzukiiichiro.github.io/posts/2023-06-13-01-n-queens-suzuki/</link><pubDate>Tue, 13 Jun 2023 12:17:46 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2023-06-13-01-n-queens-suzuki/</guid><description>【参考リンク】Ｎクイーン問題 過去記事一覧はこちらから Ｎクイーン問題 Python版について Ｎクイーン問題とは、ＮxＮの盤面にチェスのクイーンＮ</description></item><item><title>Python入門 グローバル変数をローカル関数内で使いたいのですが？</title><link>https://suzukiiichiro.github.io/posts/2023-06-13-04-python-suzuki/</link><pubDate>Tue, 13 Jun 2023 11:27:03 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2023-06-13-04-python-suzuki/</guid><description>グローバル変数をローカル関数内で使いたいのですが？ Pythonでは、グローバルで宣言された変数を「ローカル関数」で使う場合、「この変数はグロ</description></item><item><title>Python入門 forをC言語のように記述したいのですが？</title><link>https://suzukiiichiro.github.io/posts/2023-06-13-03-python-suzuki/</link><pubDate>Tue, 13 Jun 2023 11:12:15 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2023-06-13-03-python-suzuki/</guid><description>forをC言語のように記述したいのですが？ できます。 まず、その前にpythonでは一般的に以下のように書きます。 for i in range(size): print(i) このrange()</description></item><item><title>Python入門 if文の中で改行したいのですが？</title><link>https://suzukiiichiro.github.io/posts/2023-06-13-02-python-suzuki/</link><pubDate>Tue, 13 Jun 2023 11:05:25 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2023-06-13-02-python-suzuki/</guid><description>if文の中で改行したいのですが？ 長い・・・・。 if 1 == 1 and 2 == 2 and 3 == 3 and 4 == 4: print(&amp;#39;equal!!&amp;#39;) # エラー 「SyntaxError: invalid syntax」 if 1 == 1 and</description></item><item><title>Python入門 配列を初期化したいのですが？</title><link>https://suzukiiichiro.github.io/posts/2023-06-13-01-python-suzuki/</link><pubDate>Tue, 13 Jun 2023 10:49:31 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2023-06-13-01-python-suzuki/</guid><description>配列を初期化したいのですが？ 配列を０（ゼロ）で埋めて初期化します。 MAX=5 board=[0 for i in range(MAX)] その他のシチュエーションはこちら # リスト（配列）の初期化：角か</description></item><item><title>Python入門 辞書を使いたいのですが？</title><link>https://suzukiiichiro.github.io/posts/2023-06-09-01-python-suzuki/</link><pubDate>Fri, 09 Jun 2023 16:01:23 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2023-06-09-01-python-suzuki/</guid><description>辞書を使いたいのですが？ 辞書の作り方１． # Using curly braces dict_value = {&amp;#39;Name&amp;#39;: &amp;#39;Joseph&amp;#39;, &amp;#39;Age&amp;#39;: 30, &amp;#39;Height&amp;#39;: 6.3} print(&amp;#39;Dictionary is Created Using the Curly Braces: &amp;#39;,dict_value) # Dictionary is Created Using the Curly Braces: {&amp;#39;Name&amp;#39;: &amp;#39;Joseph&amp;#39;, &amp;#39;Age&amp;#39;: 30, &amp;#39;Height&amp;#39;: 6.3} print(type(dict_value)) # &amp;lt;class &amp;#39;dict&amp;#39;&amp;gt; 辞書の作り方２． # Using dict() function</description></item><item><title>Python入門 文字列の比較をしたいのですが？</title><link>https://suzukiiichiro.github.io/posts/2023-06-08-06-python-suzuki/</link><pubDate>Thu, 08 Jun 2023 16:38:57 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2023-06-08-06-python-suzuki/</guid><description>文字列の比較をしたいのですが？ 比較方法はいくつかあります。 以下の方法は「数値」の比較となります。 &amp;lt; (less than) &amp;gt; (greater than) &amp;lt;= (equal to or less than) &amp;gt;= (greater than or equal to) 「文字列</description></item><item><title>Python入門 ファイルを上書きするにはどうすればよいですか？</title><link>https://suzukiiichiro.github.io/posts/2023-06-08-05-python-suzuki/</link><pubDate>Thu, 08 Jun 2023 13:59:03 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2023-06-08-05-python-suzuki/</guid><description>ファイルを上書きするにはどうすればよいですか？ 読み書きしたいファイルを用意します。 Python Guide and Java Guide 方法１．write()を使ってファイルを上書きす</description></item><item><title>Python入門 ファイル内の文字列を検索したいのですが？</title><link>https://suzukiiichiro.github.io/posts/2023-06-08-04-python-suzuki/</link><pubDate>Thu, 08 Jun 2023 12:36:41 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2023-06-08-04-python-suzuki/</guid><description>ファイル内の文字列を検索したいのですが？ 方法１．fileを使う 読み込んで検索したい対象ファイルは以下のとおりです。 Welcome to Python Guide! Welcome to Java Guide! Welcome to C Guide! Welcome</description></item><item><title>Python入門 リストの要素を削除したいのですが？</title><link>https://suzukiiichiro.github.io/posts/2023-06-08-03-python-suzuki/</link><pubDate>Thu, 08 Jun 2023 12:16:03 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2023-06-08-03-python-suzuki/</guid><description>リストの要素を削除したいのですが？ remove()を使って要素を削除する #!/usr/local/env python3 myList = [ 8 , 6 , 9 , 4 , 3 , 2 , 5 , 9 ] print (&amp;#34;Original List&amp;#34; , myList) # Original List [8, 6, 9, 4, 3,</description></item><item><title>Python入門 `sort()`と`sorted()`の違いがわかりません</title><link>https://suzukiiichiro.github.io/posts/2023-06-08-02-python-suzuki/</link><pubDate>Thu, 08 Jun 2023 11:32:38 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2023-06-08-02-python-suzuki/</guid><description>sort()とsorted()の違いがわかりません sort()は元のリスト自体を書き換えます l = [3, 1, 4, 5, 2] l.sort() print(l) # [1, 2, 3, 4, 5] 反転する場合は、r</description></item><item><title>Python入門 `next()`関数はどんなときに使うのですか</title><link>https://suzukiiichiro.github.io/posts/2023-06-08-01-python-suzuki/</link><pubDate>Thu, 08 Jun 2023 11:07:48 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2023-06-08-01-python-suzuki/</guid><description>next()関数はどんなときに使うのですか？ リストなどの複数の要素を持ったデータ型といった「イテレータ」の要素を順番に取り出すことができます</description></item><item><title>Python入門 compile関数ってどんなときに使うのですか？</title><link>https://suzukiiichiro.github.io/posts/2023-06-07-06-python-suzuki/</link><pubDate>Wed, 07 Jun 2023 16:04:46 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2023-06-07-06-python-suzuki/</guid><description>compile関数ってどんなときに使うのですか？ まず、pythonはインタープリタ言語です。 インタープリタ言語はソースコードを１行ずつ実行し</description></item><item><title>Python入門 特殊文字を削除したいのですが？</title><link>https://suzukiiichiro.github.io/posts/2023-06-07-05-python-suzuki/</link><pubDate>Wed, 07 Jun 2023 15:18:09 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2023-06-07-05-python-suzuki/</guid><description>特殊文字を削除したいのですが 方法１．string.replace()で特殊文字を削除する #!/usr/local/env python3 string_value = &amp;#34;@Hello@and#Welcome%to&amp;amp;Python&amp;#34; # `&amp;#34;` ダブルクォートの手前をエスケープ`\`</description></item><item><title>Python入門 部分文字列を削除したいのですが？</title><link>https://suzukiiichiro.github.io/posts/2023-06-07-04-python-suzuki/</link><pubDate>Wed, 07 Jun 2023 13:28:29 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2023-06-07-04-python-suzuki/</guid><description>部分文字列を削除したいのですが？ 方法１．repralce()を使う #!/usr/local/env python3 my_str = &amp;#34;Welcome to LinuxHint World!&amp;#34; print(&amp;#34;Original String : &amp;#34; + my_str) # Original String : Welcome to LinuxHint World! print(&amp;#34;Resultant String : &amp;#34; + my_str.replace(&amp;#34;Welcome &amp;#34;,&amp;#34;&amp;#34;)) # Resultant String : to LinuxHint World! 方</description></item><item><title>Python入門 ファイルを読み込みたいのですが？</title><link>https://suzukiiichiro.github.io/posts/2023-06-07-03-python-suzuki/</link><pubDate>Wed, 07 Jun 2023 12:01:45 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2023-06-07-03-python-suzuki/</guid><description>ファイルを読み込みたいのですが？ 以下のファイルを読み込みたいと思います。 language python ruby java swift javascript php 方法１．readline()で一行ずつ読み込む ファイル</description></item><item><title>Python入門 文字列から空白スペースを除去したいのですが？</title><link>https://suzukiiichiro.github.io/posts/2023-06-07-02-python-suzuki/</link><pubDate>Wed, 07 Jun 2023 10:28:41 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2023-06-07-02-python-suzuki/</guid><description>文字列から空白スペースを除去したいのですが？ 方法１．replace()を使う string_value =&amp;#34;Hello and Welcome to Python Guide.&amp;#34; output=string_value.replace(&amp;#34; &amp;#34;, &amp;#34;&amp;#34;) print(output) # HelloandWelcometoPythonGuide. 方法２．translate()を使う import</description></item><item><title>Python入門 リストを簡単に出力したいのですが？</title><link>https://suzukiiichiro.github.io/posts/2023-06-07-01-python-suzuki/</link><pubDate>Wed, 07 Jun 2023 10:07:33 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2023-06-07-01-python-suzuki/</guid><description>リストを簡単に出力したいのですが？ 方法１．forを使う list_value = [&amp;#34;Joseph&amp;#34;, &amp;#34;Anna&amp;#34;, &amp;#34;Lily&amp;#34;] for ele in list_value: print(ele, end=&amp;#34;,&amp;#34;) # Joseph, Anna, Lily end=&amp;quot;,&amp;ldquo;は、要素と要素の間の</description></item><item><title>Python入門 `__str__`と`__repr__`ってなんですか？</title><link>https://suzukiiichiro.github.io/posts/2023-06-06-06-python-suzuki/</link><pubDate>Tue, 06 Jun 2023 17:48:39 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2023-06-06-06-python-suzuki/</guid><description>__str__と__repr__ってなんですか？ _ はアンダースコアです。 アンダースコアが２つ並ぶと「ダブルアンダースコア」となります。 これを</description></item><item><title>Python入門 回文かどうかを調べたいのですが？</title><link>https://suzukiiichiro.github.io/posts/2023-06-06-05-python-suzuki/</link><pubDate>Tue, 06 Jun 2023 15:47:48 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2023-06-06-05-python-suzuki/</guid><description>回文かどうかを調べたいのですが？ 回文とは、「上から読んでも下から読んでも同じ」文、または語句のことです。 ここでは簡単に「madam」や「ra</description></item><item><title>Python入門 リストの`-1`ってなんですか？</title><link>https://suzukiiichiro.github.io/posts/2023-06-06-04-python-suzuki/</link><pubDate>Tue, 06 Jun 2023 15:18:21 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2023-06-06-04-python-suzuki/</guid><description>リストの-1ってなんですか？ リストの-1は最後の要素を示します。 指定されたリストの最初の要素のインデックス/位置は「0」、次の要素のインデッ</description></item><item><title>Python入門 リストの要素を数えたいのですが？</title><link>https://suzukiiichiro.github.io/posts/2023-06-06-03-python-suzuki/</link><pubDate>Tue, 06 Jun 2023 14:15:23 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2023-06-06-03-python-suzuki/</guid><description>リストの数を要素を数えたいのですが、 方法１．set()で数える names = [&amp;#39;Joseph&amp;#39;, &amp;#39;Anna&amp;#39;, &amp;#39;Lily&amp;#39;, &amp;#39;Henry&amp;#39;, &amp;#39;Joseph&amp;#39;] print(len(set(names))) # 4 方法２．collectionsモジュールのCounter(</description></item><item><title>Python入門 switchの構文がわかりません</title><link>https://suzukiiichiro.github.io/posts/2023-06-06-02-python-suzuki/</link><pubDate>Tue, 06 Jun 2023 13:15:32 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2023-06-06-02-python-suzuki/</guid><description>switchの構文がわかりません pythonにはswitch構文はありません。 Python3.10で新しく導入されるmatch/caseを紹</description></item><item><title>Python入門 ASCII判定したいのですが？</title><link>https://suzukiiichiro.github.io/posts/2023-06-06-01-python-suzuki/</link><pubDate>Tue, 06 Jun 2023 10:35:23 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2023-06-06-01-python-suzuki/</guid><description>ASCII判定したいのですが？ 構文 string.isascii () 事例 mystr=&amp;#34;Python&amp;#34; print(&amp;#39;アルファベットの文字列はASCIIです:&amp;#39;,mystr.isasc</description></item><item><title>Python入門 文字列を置換したいのですが？</title><link>https://suzukiiichiro.github.io/posts/2023-06-05-02-python-suzuki/</link><pubDate>Mon, 05 Jun 2023 15:24:57 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2023-06-05-02-python-suzuki/</guid><description>文字列を置換したいのですが？ 方法１．replace()を使う #!/usr/local/env python3 def Python_Replace_Characters_in_a_String(): # 方法１ old_value = &amp;#34;Python&amp;#34; new_value = &amp;#34;Java&amp;#34; print (old_value.replace (&amp;#34;Python&amp;#34;,new_value)) # Java Python_Replace_Characters_in_a_String() ３つ目のパラメータで置換の回数を指定する</description></item><item><title>Python入門 複数行の代入はできますか？</title><link>https://suzukiiichiro.github.io/posts/2023-06-05-01-python-suzuki/</link><pubDate>Mon, 05 Jun 2023 15:05:31 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2023-06-05-01-python-suzuki/</guid><description>複数行の代入はできますか？ 方法１．三重引用符'''で囲む。 def Python_Multiline_String(): multiline_string = &amp;#39;&amp;#39;&amp;#39;Hello and Welcome to Python Guide &amp;#39;&amp;#39;&amp;#39; print(multiline_string) &amp;#34;&amp;#34;&amp;#34; output Hello and Welcome to Python Guide &amp;#34;&amp;#34;&amp;#34; Python_Multiline_String() 方法２．エスケープ\を使う #!/usr/local/env python3 def Python_Multiline_String(): multiline_string =</description></item><item><title>Python入門 辞書内包表記ってなんですか？</title><link>https://suzukiiichiro.github.io/posts/2023-06-01-05-python-suzuki/</link><pubDate>Thu, 01 Jun 2023 17:08:39 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2023-06-01-05-python-suzuki/</guid><description>辞書内包表記ってなんですか？ 要素を順番に”仮変数”に取得し、”条件”に一致するものを使って{キー: 値}を持つ辞書を作るということです。 ２つの</description></item><item><title>Python入門 単一の文字列を文字列のリストに結合するにはどうすればよいですか?</title><link>https://suzukiiichiro.github.io/posts/2023-06-01-04-python-suzuki/</link><pubDate>Thu, 01 Jun 2023 16:01:20 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2023-06-01-04-python-suzuki/</guid><description>単一の文字列を文字列のリストに結合するにはどうすればよいですか? 方法 1: Python の「eval()」メソッドを使用して単一の文字列を文字列のリストに結</description></item><item><title>Python入門 文字列内の最後の出現箇所を検索するにはどうすればよいですか？</title><link>https://suzukiiichiro.github.io/posts/2023-06-01-03-python-suzuki/</link><pubDate>Thu, 01 Jun 2023 15:43:37 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2023-06-01-03-python-suzuki/</guid><description>文字列内の最後の出現箇所を検索するにはどうすればよいですか？ Python 文字列内で最後に出現した文字のインデックスを取得する方法を説明します。 方法 1: 「</description></item><item><title>Python入門 文字列を追加するにはどうすればよいですか?</title><link>https://suzukiiichiro.github.io/posts/2023-06-01-02-python-suzuki/</link><pubDate>Thu, 01 Jun 2023 15:11:14 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2023-06-01-02-python-suzuki/</guid><description>文字列を追加するにはどうすればよいですか 方法１ + 演算子を使用して Python 文字列を追加する #!/usr/local/env python3 def Append_to_String(): myStr1 = &amp;#34;Welcome to&amp;#34; myStr2 = &amp;#34;Linuxhint World!&amp;#34; appStr = myStr1 + myStr2 print(&amp;#34;The appended string is: &amp;#34; + appStr) # The appended string is:</description></item><item><title>Python入門 リストが空かどうかを確認するにはどうすればよいですか?</title><link>https://suzukiiichiro.github.io/posts/2023-06-01-01-python-suzuki/</link><pubDate>Thu, 01 Jun 2023 14:09:34 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2023-06-01-01-python-suzuki/</guid><description>リストが空かどうかを確認するにはどうすればよいですか? 方法 1: Python で「not」演算子を使用して入力リストが空かどうかを確認する方法 #!/usr/bin/env python3 def How_to_Check_If_a_List_Is_Empty_in_Python_1(): myList = []</description></item><item><title>Ｎクイーン問題（３７）第六章 C言語移植 その１７ pthread並列処理完成</title><link>https://suzukiiichiro.github.io/posts/2023-05-30-17-n-queens-suzuki/</link><pubDate>Tue, 30 May 2023 13:24:57 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2023-05-30-17-n-queens-suzuki/</guid><description>【参考リンク】Ｎクイーン問題 過去記事一覧はこちらから エイト・クイーンのプログラムアーカイブ Bash、Lua、C、Java、Python、CU</description></item><item><title>Ｎクイーン問題（３６）第六章 C言語移植 その１６ pthreadの実装</title><link>https://suzukiiichiro.github.io/posts/2023-05-30-16-n-queens-suzuki/</link><pubDate>Tue, 30 May 2023 13:24:49 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2023-05-30-16-n-queens-suzuki/</guid><description>【参考リンク】Ｎクイーン問題 過去記事一覧はこちらから エイト・クイーンのプログラムアーカイブ Bash、Lua、C、Java、Python、CU</description></item><item><title>Ｎクイーン問題（３５）第六章 C言語移植 その１５ pthread実装直前版完成</title><link>https://suzukiiichiro.github.io/posts/2023-05-30-15-n-queens-suzuki/</link><pubDate>Tue, 30 May 2023 13:24:40 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2023-05-30-15-n-queens-suzuki/</guid><description>【参考リンク】Ｎクイーン問題 過去記事一覧はこちらから エイト・クイーンのプログラムアーカイブ Bash、Lua、C、Java、Python、CU</description></item><item><title>Ｎクイーン問題（３４）第六章 C言語移植 その１４</title><link>https://suzukiiichiro.github.io/posts/2023-05-30-14-n-queens-suzuki/</link><pubDate>Tue, 30 May 2023 13:24:30 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2023-05-30-14-n-queens-suzuki/</guid><description>【参考リンク】Ｎクイーン問題 過去記事一覧はこちらから エイト・クイーンのプログラムアーカイブ Bash、Lua、C、Java、Python、CU</description></item><item><title>Ｎクイーン問題（３３）第六章 C言語移植 その１３</title><link>https://suzukiiichiro.github.io/posts/2023-05-30-13-n-queens-suzuki/</link><pubDate>Tue, 30 May 2023 13:24:21 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2023-05-30-13-n-queens-suzuki/</guid><description>【参考リンク】Ｎクイーン問題 過去記事一覧はこちらから エイト・クイーンのプログラムアーカイブ Bash、Lua、C、Java、Python、CU</description></item><item><title>Ｎクイーン問題（３２）第六章 C言語移植 その１２</title><link>https://suzukiiichiro.github.io/posts/2023-05-30-12-n-queens-suzuki/</link><pubDate>Tue, 30 May 2023 13:24:07 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2023-05-30-12-n-queens-suzuki/</guid><description>【参考リンク】Ｎクイーン問題 過去記事一覧はこちらから エイト・クイーンのプログラムアーカイブ Bash、Lua、C、Java、Python、CU</description></item><item><title>Ｎクイーン問題（３１）第六章 C言語移植 その１１</title><link>https://suzukiiichiro.github.io/posts/2023-05-30-11-n-queens-suzuki/</link><pubDate>Tue, 30 May 2023 13:24:06 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2023-05-30-11-n-queens-suzuki/</guid><description>【参考リンク】Ｎクイーン問題 過去記事一覧はこちらから エイト・クイーンのプログラムアーカイブ Bash、Lua、C、Java、Python、CU</description></item><item><title>Ｎクイーン問題（３０）第六章 C言語移植 その１０</title><link>https://suzukiiichiro.github.io/posts/2023-05-30-10-n-queens-suzuki/</link><pubDate>Tue, 30 May 2023 13:23:58 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2023-05-30-10-n-queens-suzuki/</guid><description>【参考リンク】Ｎクイーン問題 過去記事一覧はこちらから エイト・クイーンのプログラムアーカイブ Bash、Lua、C、Java、Python、CU</description></item><item><title>Ｎクイーン問題（２９）第六章 C言語移植 その９</title><link>https://suzukiiichiro.github.io/posts/2023-05-30-09-n-queens-suzuki/</link><pubDate>Tue, 30 May 2023 13:23:48 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2023-05-30-09-n-queens-suzuki/</guid><description>【参考リンク】Ｎクイーン問題 過去記事一覧はこちらから エイト・クイーンのプログラムアーカイブ Bash、Lua、C、Java、Python、CU</description></item><item><title>Ｎクイーン問題（２８）第六章 C言語移植 その８</title><link>https://suzukiiichiro.github.io/posts/2023-05-30-08-n-queens-suzuki/</link><pubDate>Tue, 30 May 2023 13:23:39 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2023-05-30-08-n-queens-suzuki/</guid><description>【参考リンク】Ｎクイーン問題 過去記事一覧はこちらから エイト・クイーンのプログラムアーカイブ Bash、Lua、C、Java、Python、CU</description></item><item><title>Ｎクイーン問題（２７）第六章 C言語移植 その７</title><link>https://suzukiiichiro.github.io/posts/2023-05-30-07-n-queens-suzuki/</link><pubDate>Tue, 30 May 2023 13:23:26 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2023-05-30-07-n-queens-suzuki/</guid><description>【参考リンク】Ｎクイーン問題 過去記事一覧はこちらから エイト・クイーンのプログラムアーカイブ Bash、Lua、C、Java、Python、CU</description></item><item><title>Ｎクイーン問題（２６）第六章 C言語移植 その６</title><link>https://suzukiiichiro.github.io/posts/2023-05-30-06-n-queens-suzuki/</link><pubDate>Tue, 30 May 2023 13:23:18 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2023-05-30-06-n-queens-suzuki/</guid><description>【参考リンク】Ｎクイーン問題 過去記事一覧はこちらから エイト・クイーンのプログラムアーカイブ Bash、Lua、C、Java、Python、CU</description></item><item><title>Ｎクイーン問題（２５）第六章 C言語移植 その５</title><link>https://suzukiiichiro.github.io/posts/2023-05-30-05-n-queens-suzuki/</link><pubDate>Tue, 30 May 2023 13:23:09 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2023-05-30-05-n-queens-suzuki/</guid><description>【参考リンク】Ｎクイーン問題 過去記事一覧はこちらから エイト・クイーンのプログラムアーカイブ Bash、Lua、C、Java、Python、CU</description></item><item><title>Ｎクイーン問題（２４）第六章 C言語移植 その４</title><link>https://suzukiiichiro.github.io/posts/2023-05-30-04-n-queens-suzuki/</link><pubDate>Tue, 30 May 2023 13:22:56 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2023-05-30-04-n-queens-suzuki/</guid><description>【参考リンク】Ｎクイーン問題 過去記事一覧はこちらから エイト・クイーンのプログラムアーカイブ Bash、Lua、C、Java、Python、CU</description></item><item><title>Ｎクイーン問題（２３）第六章 C言語移植 その３</title><link>https://suzukiiichiro.github.io/posts/2023-05-30-03-n-queens-suzuki/</link><pubDate>Tue, 30 May 2023 13:22:44 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2023-05-30-03-n-queens-suzuki/</guid><description>【参考リンク】Ｎクイーン問題 過去記事一覧はこちらから エイト・クイーンのプログラムアーカイブ Bash、Lua、C、Java、Python、CU</description></item><item><title>Ｎクイーン問題（２２）第六章 C言語移植 その２</title><link>https://suzukiiichiro.github.io/posts/2023-05-30-02-n-queens-suzuki/</link><pubDate>Tue, 30 May 2023 13:16:42 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2023-05-30-02-n-queens-suzuki/</guid><description>【参考リンク】Ｎクイーン問題 過去記事一覧はこちらから エイト・クイーンのプログラムアーカイブ Bash、Lua、C、Java、Python、CU</description></item><item><title>Ｎクイーン問題（２１）第六章 C言語移植 その１</title><link>https://suzukiiichiro.github.io/posts/2023-05-30-01-n-queens-suzuki/</link><pubDate>Tue, 30 May 2023 13:16:40 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2023-05-30-01-n-queens-suzuki/</guid><description>【参考リンク】Ｎクイーン問題 過去記事一覧はこちらから エイト・クイーンのプログラムアーカイブ Bash、Lua、C、Java、Python、CU</description></item><item><title>Ｎクイーン問題（２０）第五章 並列処理</title><link>https://suzukiiichiro.github.io/posts/2023-05-23-02-n-queens-suzuki/</link><pubDate>Tue, 23 May 2023 14:55:24 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2023-05-23-02-n-queens-suzuki/</guid><description>【参考リンク】Ｎクイーン問題 過去記事一覧はこちらから 並列処理 やってきました！ 並列処理といえば、マルチスレッド、マルチプロセス、分散処理と、い</description></item><item><title>Ｎクイーン問題（１９）第五章 キャリーチェーン</title><link>https://suzukiiichiro.github.io/posts/2023-05-23-01-n-queens-suzuki/</link><pubDate>Tue, 23 May 2023 13:22:23 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2023-05-23-01-n-queens-suzuki/</guid><description>【参考リンク】Ｎクイーン問題 過去記事一覧はこちらから キャリーチェーン キャリーチェーンはＮ２７の解を発見したドレスデン大学の研究者が編み出した</description></item><item><title>Ｎクイーン問題（１８）第四章 エイト・クイーンノスタルジー</title><link>https://suzukiiichiro.github.io/posts/2023-04-25-01-n-queens-suzuki/</link><pubDate>Tue, 25 Apr 2023 11:17:22 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2023-04-25-01-n-queens-suzuki/</guid><description>【参考リンク】Ｎクイーン問題 過去記事一覧はこちらから はじめに 以下のサイトはとても勉強になります。 World records for the n queens problem http://www.nqueens.de/sub/WorldRecord.en.html しかし興味があっても日本語で</description></item><item><title>Ｎクイーン問題（１７）第四章　偉人のソースを読む「Ｎ２４を発見 Ｊｅｆｆ Ｓｏｍｅｒｓ」</title><link>https://suzukiiichiro.github.io/posts/2023-04-21-01-n-queens-suzuki/</link><pubDate>Fri, 21 Apr 2023 10:16:27 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2023-04-21-01-n-queens-suzuki/</guid><description>【参考リンク】Ｎクイーン問題 過去記事一覧はこちらから Ｎ２３を発見 Ｊｅｆｆ Ｓｏｍｅｒｓを読む Ｊｅｆｆ Ｓｏｍｅｒｓ さんはＮ２３を発見したエイトク</description></item><item><title>Ｎクイーン問題（１６）第三章　対象解除法 ソース解説</title><link>https://suzukiiichiro.github.io/posts/2023-04-18-01-n-queens-suzuki/</link><pubDate>Tue, 18 Apr 2023 15:33:57 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2023-04-18-01-n-queens-suzuki/</guid><description>【参考リンク】Ｎクイーン問題 過去記事一覧はこちらから 対象解除法について では、前項のつづきから。 対象解除法のソースは４つの関数で構成されていま</description></item><item><title>Ｎクイーン問題（１５）第三章　対象解除法 ロジック解説</title><link>https://suzukiiichiro.github.io/posts/2023-04-13-02-nqueens-suzuki/</link><pubDate>Thu, 13 Apr 2023 15:33:57 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2023-04-13-02-nqueens-suzuki/</guid><description>【参考リンク】Ｎクイーン問題 過去記事一覧はこちらから 対象解除法について まず、Ｎが小さな盤面で考えていきます。 以下、順に見て理解を深めてもらえ</description></item><item><title>Ｎクイーン問題（１４）第三章　ミラー</title><link>https://suzukiiichiro.github.io/posts/2023-04-13-01-nqueens-suzuki/</link><pubDate>Thu, 13 Apr 2023 10:25:04 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2023-04-13-01-nqueens-suzuki/</guid><description>【参考リンク】Ｎクイーン問題 過去記事一覧はこちらから ミラー ミラー（鏡像）を用いてどのように改善できるのか Ｎ５＝１０、Ｎ８＝９２といった、N-</description></item><item><title>Ｎクイーン問題（１３）第三章　ビットマップ</title><link>https://suzukiiichiro.github.io/posts/2023-04-05-01-nqueens-suzuki/</link><pubDate>Wed, 05 Apr 2023 19:08:30 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2023-04-05-01-nqueens-suzuki/</guid><description>【参考リンク】Ｎクイーン問題 過去記事一覧はこちらから ビットマップ Ｎ×ＮのチェスボードのＮ個のクイーンの配置を、bitwise(ビット)で表し</description></item><item><title>Ｎクイーン問題（１２）第二章　まとめ</title><link>https://suzukiiichiro.github.io/posts/2023-03-17-02-n-queens-suzuki/</link><pubDate>Fri, 17 Mar 2023 14:41:52 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2023-03-17-02-n-queens-suzuki/</guid><description>【参考リンク】Ｎクイーン問題 過去記事一覧はこちらから 第２章 まとめ ここまでＮクイーンをこんなにやってきました。 N-Queens問題：Ｎクイーン</description></item><item><title>Ｎクイーン問題（１１）第二章　配置フラグの再帰・非再帰</title><link>https://suzukiiichiro.github.io/posts/2023-03-17-01-n-queens-suzuki/</link><pubDate>Fri, 17 Mar 2023 14:30:21 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2023-03-17-01-n-queens-suzuki/</guid><description>【参考リンク】Ｎクイーン問題 過去記事一覧はこちらから 第２章 エイトクイーン 配置フラグ 国内で最もきちんと説明していると（僕が勝手に）思っているＵ</description></item><item><title>Ｎクイーン問題（１０）第二章　バックトラックの再帰・非再帰</title><link>https://suzukiiichiro.github.io/posts/2023-03-16-01-n-queens-suzuki/</link><pubDate>Fri, 17 Mar 2023 14:10:59 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2023-03-16-01-n-queens-suzuki/</guid><description>【参考リンク】Ｎクイーン問題 過去記事一覧はこちらから 第２章 エイトクイーン バックトラック 前回の「ブルートフォース（力まかせ探索）」では、Ｎ個の</description></item><item><title>Ｎクイーン問題（９）第二章　ブルートフォースの再帰・非再帰</title><link>https://suzukiiichiro.github.io/posts/2023-03-14-01-n-queens-suzuki/</link><pubDate>Thu, 16 Mar 2023 11:26:18 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2023-03-14-01-n-queens-suzuki/</guid><description>【参考リンク】Ｎクイーン問題 過去記事一覧はこちらから Ｎクイーン問題について Ｎクイーン問題とは、ＮxＮの盤面にチェスのクイーンＮ個を、互いに効</description></item><item><title>Ｎクイーン問題（８）第一章　まとめ</title><link>https://suzukiiichiro.github.io/posts/2023-03-09-01-n-queens-suzuki/</link><pubDate>Thu, 09 Mar 2023 14:45:39 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2023-03-09-01-n-queens-suzuki/</guid><description>【参考リンク】Ｎクイーン問題 過去記事一覧はこちらから ここまでのあらすじ ここまでのおさらいと整理・まとめをしておきたいと思います。 （１）ではエ</description></item><item><title>Ｎクイーン問題（７）第一章　ブルートフォース再び</title><link>https://suzukiiichiro.github.io/posts/2023-03-08-01-n-queens-suzuki/</link><pubDate>Wed, 08 Mar 2023 15:32:38 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2023-03-08-01-n-queens-suzuki/</guid><description>【参考リンク】Ｎクイーン問題 過去記事一覧はこちらから ブルートフォース再び 今回、一番初めに紹介しておきながら、クイーンの位置を列挙することにと</description></item><item><title>Ｎクイーン問題（６）第一章　配置フラグ</title><link>https://suzukiiichiro.github.io/posts/2023-03-07-01-n-queens-suzuki/</link><pubDate>Tue, 07 Mar 2023 16:10:45 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2023-03-07-01-n-queens-suzuki/</guid><description>【参考リンク】Ｎクイーン問題 過去記事一覧はこちらから 配置フラグ 各列、対角線上にクイーンがあるかどうかのフラグを用意して高速化を図ります。 これ</description></item><item><title>Ｎクイーン問題（５）第一章　進捗表示テーブルの作成</title><link>https://suzukiiichiro.github.io/posts/2023-03-06-01-n-queens-suzuki/</link><pubDate>Mon, 06 Mar 2023 22:31:15 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2023-03-06-01-n-queens-suzuki/</guid><description>【参考リンク】Ｎクイーン問題 過去記事一覧はこちらから Ｎを徐々に増やしていく進捗表示テーブルの作成 今は、ソースの中でパラメータを渡す形でＮの値</description></item><item><title/><link>https://suzukiiichiro.github.io/posts/2021-12-23-02-suzuki/</link><pubDate>Tue, 21 Feb 2023 18:13:01 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2021-12-23-02-suzuki/</guid><description>書籍の紹介 詳解 シェルスクリプト 大型本 2006/1/16 Unixのプログラムは「ツール」と呼ばれます。 Unixは、処理を実現するために複数の道具(ツール)を組</description></item><item><title>Ｎクイーン問題（４）第一章　バックトラック</title><link>https://suzukiiichiro.github.io/posts/2023-02-21-01-n-queens-suzuki/</link><pubDate>Tue, 21 Feb 2023 18:13:01 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2023-02-21-01-n-queens-suzuki/</guid><description>【参考リンク】Ｎクイーン問題 過去記事一覧はこちらから これまでのあらすじ ブルートフォースは日本語で「ちからまかせ探索」という意味になります。 す</description></item><item><title>Ｎクイーン問題（３）第一章　バックトラック準備編</title><link>https://suzukiiichiro.github.io/posts/2023-02-14-03-n-queens-suzuki/</link><pubDate>Tue, 14 Feb 2023 18:18:42 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2023-02-14-03-n-queens-suzuki/</guid><description>【参考リンク】Ｎクイーン問題 過去記事一覧はこちらから 前回までのあらすじ 前回の記事では、エイトクイーンの３つのルール １．縦に一つだけのクイーン</description></item><item><title>Ｎクイーン問題（２）第一章　ブルートフォース</title><link>https://suzukiiichiro.github.io/posts/2023-02-14-02-n-queens-suzuki/</link><pubDate>Tue, 14 Feb 2023 14:56:53 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2023-02-14-02-n-queens-suzuki/</guid><description>【参考リンク】Ｎクイーン問題 過去記事一覧はこちらから Ｎクイーンについて簡単に ではさっそくＮクイーン問題を考えてみましょう。 この章では、可能性</description></item><item><title>Ｎクイーン問題（１）第一章　エイトクイーンについて</title><link>https://suzukiiichiro.github.io/posts/2023-02-14-01-n-queens-suzuki/</link><pubDate>Tue, 14 Feb 2023 12:01:52 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2023-02-14-01-n-queens-suzuki/</guid><description>【参考リンク】Ｎクイーン問題 過去記事一覧はこちらから Ｎクイーン問題とは Ｎクイーン問題とは、「８列×８行のチェスボードに８個のクイーンを、互い</description></item><item><title>シェルスクリプト１０００本ノック</title><link>https://suzukiiichiro.github.io/posts/2023-02-01-01-oneliner-suzuki/</link><pubDate>Wed, 01 Feb 2023 13:08:01 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2023-02-01-01-oneliner-suzuki/</guid><description>シェルスクリプト１０００本ノック これからシェルスクリプトを勉強する人、なんとか本を見ながらかけるようになった人、バリバリ書いてきたけど、まだ</description></item><item><title>BASHシェルスクリプトで「キー入力待ち」処理を作ってみよう</title><link>https://suzukiiichiro.github.io/posts/2023-01-20-01-okyesno-suzuki/</link><pubDate>Fri, 20 Jan 2023 10:22:00 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2023-01-20-01-okyesno-suzuki/</guid><description>BASHシェルスクリプトで「キー入力待ち」プロンプトを実装する 説明も何もよくみるあれです。 実行しますか？ （y or N): 何かを押せば処理を続けたい場</description></item><item><title>【mapfile】bash/シェルスクリプトマニアックコマンドあれこれ１３</title><link>https://suzukiiichiro.github.io/posts/2023-01-12-01-mapfile-suzuki/</link><pubDate>Thu, 12 Jan 2023 16:00:05 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2023-01-12-01-mapfile-suzuki/</guid><description>mapfile（マップファイル） bash シェルの mapfile コマンドは、読み取り配列としてよく知られています。 主な目的は、標準入力行を読み取り、それらをイン</description></item><item><title>【ちょいと便利な】シェルスクリプトワンライナー特集２【一行完結】</title><link>https://suzukiiichiro.github.io/posts/2023-01-11-01-oneliner-suzuki/</link><pubDate>Wed, 11 Jan 2023 10:39:50 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2023-01-11-01-oneliner-suzuki/</guid><description>ワンライナー ワンライナー（英：one liner）とは 華麗な職人技によって処理を1行に全部詰め込んだ「1行ですべてが完結しているプログラムソー</description></item><item><title>MacOSをアップデートしてから、ターミナルを開くたびに、「The default interactive shell is now zsh.」というメッセージが表示されるようになりました。</title><link>https://suzukiiichiro.github.io/posts/2023-01-10-01-chsh-suzuki/</link><pubDate>Tue, 10 Jan 2023 11:39:43 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2023-01-10-01-chsh-suzuki/</guid><description>MacOSをアップデートしてから、ターミナルを開くたびに、「The default interactive shell is now zsh.」というメッセージが表示されるようになりました。 MacO</description></item><item><title>【ちょいと便利な】シェルスクリプトワンライナー特集【一行完結】</title><link>https://suzukiiichiro.github.io/posts/2022-11-30-01-oneliner-suzuki/</link><pubDate>Wed, 30 Nov 2022 11:23:02 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-11-30-01-oneliner-suzuki/</guid><description>ワンライナー ワンライナー（英：one liner）とは 華麗な職人技によって処理を1行に全部詰め込んだ「1行ですべてが完結しているプログラムソー</description></item><item><title>【ターミナルTIPS】ターミナルで知っておくとちょっとだけ便利なコマンド</title><link>https://suzukiiichiro.github.io/posts/2022-11-28-01-terminaltips-suzuki/</link><pubDate>Mon, 28 Nov 2022 11:49:20 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-11-28-01-terminaltips-suzuki/</guid><description>ターミナルトリック ターミナル（コンソール）で、「知っているとちょっとだけ便利なコマンド」を紹介します。 このコマンドはCtrlキーを押しながら</description></item><item><title>【set -x】bash/シェルスクリプトマニアックコマンドあれこれ１２</title><link>https://suzukiiichiro.github.io/posts/2022-11-10-01-set-x-suzuki/</link><pubDate>Thu, 10 Nov 2022 10:28:21 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-11-10-01-set-x-suzuki/</guid><description>スクリプトのデバッグ Bashは広範なデバッグ機能を提供しています。 デバッグの方法は３種類あります １．ターミナルの実行時に -x オプションを付与す</description></item><item><title>【nl】bash/シェルスクリプトマニアックコマンドあれこれ１１</title><link>https://suzukiiichiro.github.io/posts/2022-11-09-01-nl-suzuki/</link><pubDate>Wed, 09 Nov 2022 10:52:27 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-11-09-01-nl-suzuki/</guid><description>nlコマンド nl コマンドは、テキストファイルを行番号付きで出力するコマンドです。 cat -n コマンドでも行番号を付けることができますが、nl コマンドで</description></item><item><title>【comm】bash/シェルスクリプトマニアックコマンドあれこれ１０</title><link>https://suzukiiichiro.github.io/posts/2022-11-08-01-comm-suzuki/</link><pubDate>Tue, 08 Nov 2022 17:38:59 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-11-08-01-comm-suzuki/</guid><description>commコマンド commコマンドは、テキストファイルを比較するコマンドです。 comm ファイル1 ファイル2 で2つのテキストファイルを比較し、ファイル</description></item><item><title>【shuf】bash/シェルスクリプトマニアックコマンドあれこれ９</title><link>https://suzukiiichiro.github.io/posts/2022-11-08-01-shuf-suzuki/</link><pubDate>Tue, 08 Nov 2022 15:36:21 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-11-08-01-shuf-suzuki/</guid><description>shufコマンド shufはファイルやキーボードから入力した内容をシャッフル（shuffle）して出力するコマンドです。 乱数を扱う$RANDO</description></item><item><title>【numfmt】bash/シェルスクリプトマニアックコマンドあれこれ８</title><link>https://suzukiiichiro.github.io/posts/2022-11-08-01-numfmt-suzuki/</link><pubDate>Tue, 08 Nov 2022 15:19:21 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-11-08-01-numfmt-suzuki/</guid><description>numfmtコマンド numfmtコマンドは、数値の桁揃えや、金額を表示する場合の３桁区切りを簡単に実行できる便利コマンドです。 numfmt --form</description></item><item><title>【rs】bash/シェルスクリプトマニアックコマンドあれこれ７</title><link>https://suzukiiichiro.github.io/posts/2022-11-08-01-rs-suzuki/</link><pubDate>Tue, 08 Nov 2022 12:06:54 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-11-08-01-rs-suzuki/</guid><description>rsコマンド rsコマンドは、行列を入れ替えるコマンドです。 行列を入れ替える処理は、これはもう頻繁に起こるのです。 そのたびに頭を悩ませることに</description></item><item><title>【column】bash/シェルスクリプトマニアックコマンドあれこれ６</title><link>https://suzukiiichiro.github.io/posts/2022-11-08-01-column-suzuki/</link><pubDate>Tue, 08 Nov 2022 11:41:56 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-11-08-01-column-suzuki/</guid><description>columnコマンド 「column」はテキストを、複数の列（column）に整形するコマンドです。 区切り文字を指定して表形式で表示する 普通の</description></item><item><title>【join】bash/シェルスクリプトマニアックコマンドあれこれ５</title><link>https://suzukiiichiro.github.io/posts/2022-11-08-01-join-suzuki/</link><pubDate>Tue, 08 Nov 2022 11:25:36 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-11-08-01-join-suzuki/</guid><description>joinコマンド join は、2つのテキストファイルの内容を比較し、共通する項目がある行を連結するコマンドです。 例えば、 １つ目のテキストファイルに「</description></item><item><title>【paste】bash/シェルスクリプトマニアックコマンドあれこれ４</title><link>https://suzukiiichiro.github.io/posts/2022-11-08-01-paste-suzuki/</link><pubDate>Tue, 08 Nov 2022 11:05:39 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-11-08-01-paste-suzuki/</guid><description>pasteコマンド pasteコマンドは、複数のファイルを行単位で連結するコマンドです。 $ pasteファイル1 ファイル2 で「ファイル1の1行目</description></item><item><title>【jot】Bash/シェルスクリプトマニアックコマンドあれこれ３</title><link>https://suzukiiichiro.github.io/posts/2022-11-08-01-jot-suzuki/</link><pubDate>Tue, 08 Nov 2022 10:40:40 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-11-08-01-jot-suzuki/</guid><description>jotコマンド 連番を生成する 文字列と組み合わせた連番を作成する printf のフォーマットで出力する 連番の範囲を指定して出力する 乱数を出力する jotコマ</description></item><item><title>【rev】bash/シェルスクリプトマニアックコマンドあれこれ２</title><link>https://suzukiiichiro.github.io/posts/2022-11-08-01-rev-suzuki/</link><pubDate>Tue, 08 Nov 2022 10:37:14 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-11-08-01-rev-suzuki/</guid><description>rev コマンド すべての行の文字の順序を逆にする 次の例に示すように、すべての行で文字の順序を逆にします。 tac コマンドはファイルの各行を上下反転します</description></item><item><title>【tac】bash/シェルスクリプトマニアックコマンドあれこれ１</title><link>https://suzukiiichiro.github.io/posts/2022-11-08-01-tac-suzuki/</link><pubDate>Tue, 08 Nov 2022 10:13:27 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-11-08-01-tac-suzuki/</guid><description>tacコマンド tac コマンドはファイルの内容を逆順に出力するコマンドです。 最後の行が最初に表示されます。 tac という言葉は、cat という言葉の逆です</description></item><item><title>【名著紹介】「ＵＮＩＸという考え方」ご紹介</title><link>https://suzukiiichiro.github.io/posts/2022-11-07-01-theideaofunix-suzuki/</link><pubDate>Mon, 07 Nov 2022 10:30:44 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-11-07-01-theideaofunix-suzuki/</guid><description>名著紹介 これほどまでシンプルに「UNIX/Linuxとは」について書かれた本はない。 「エンジニアとしての信念はUNIXである」とはどういうこ</description></item><item><title>【アルゴリズム ソート比較】ざっくりわかるシェルスクリプト２０</title><link>https://suzukiiichiro.github.io/posts/2022-11-02-01-sortcomp-suzuki/</link><pubDate>Wed, 02 Nov 2022 10:37:46 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-11-02-01-sortcomp-suzuki/</guid><description>ソート これまで、バブルソート、選択ソート、挿入ソート、マージソート、シェルソート、クイックソートを学習してきました。 【バブルソート】 https://suzukiiichiro.github.io/posts/2022-10-05-01-algorithm-bubblesort-suzuki/ 【選択</description></item><item><title>【アルゴリズム クイックソート】ざっくりわかるシェルスクリプト１９</title><link>https://suzukiiichiro.github.io/posts/2022-11-01-01-quicksort-suzuki/</link><pubDate>Tue, 01 Nov 2022 11:35:46 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-11-01-01-quicksort-suzuki/</guid><description>クイックソート クイックソートは、誰もが人気ナンバーワンと認めるソートアルゴリズムです。 クイックソート 理由として、クイックソートは多くの場合に</description></item><item><title>【アルゴリズム シェルソート】ざっくりわかるシェルスクリプト１８</title><link>https://suzukiiichiro.github.io/posts/2022-10-27-01-shellsort-suzuki/</link><pubDate>Thu, 27 Oct 2022 14:27:50 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-10-27-01-shellsort-suzuki/</guid><description>シェルソート シェルソートは、挿入ソートの欠点を補う形で考案されたソートアルゴリズムです。 シェルソート シェル＝貝殻 というのは「がせ情報」で、じ</description></item><item><title>【アルゴリズム マージソート】ざっくりわかるシェルスクリプト１７</title><link>https://suzukiiichiro.github.io/posts/2022-10-19-01-mergesort-suzuki/</link><pubDate>Wed, 19 Oct 2022 15:49:34 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-10-19-01-mergesort-suzuki/</guid><description>マージソート マージソートは、これまで紹介した「バブルソート」「挿入ソート」「選択ソート」と比べると、少なくともスピードの点ではずっと高速で効</description></item><item><title>【アルゴリズム 連結リスト】ざっくりわかるシェルスクリプト１６</title><link>https://suzukiiichiro.github.io/posts/2022-10-18-01-list-suzuki/</link><pubDate>Tue, 18 Oct 2022 11:31:36 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-10-18-01-list-suzuki/</guid><description>配列とリスト これまで配列について説明してきました。 配列で再帰を組む方法を前回説明しました。 配列は 非順序配列は探索が遅い 順序配列は挿入が遅い い</description></item><item><title>【アルゴリズム 再帰】ざっくりわかるシェルスクリプト１５</title><link>https://suzukiiichiro.github.io/posts/2022-10-07-01-algorithm-recursion-suzuki/</link><pubDate>Fri, 07 Oct 2022 11:19:00 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-10-07-01-algorithm-recursion-suzuki/</guid><description>再帰 実行している関数自身の関数の処理内で、自分自身である関数を呼び出し実行することです。 再帰は必ず基底条件を明示する必要があります。 （基底条</description></item><item><title>【アルゴリズム キュー】ざっくりわかるシェルスクリプト１４</title><link>https://suzukiiichiro.github.io/posts/2022-10-06-01-algorithm-queue-suzuki/</link><pubDate>Thu, 06 Oct 2022 13:43:07 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-10-06-01-algorithm-queue-suzuki/</guid><description>キュー キューはデータ構造の一つです。 キューは待ち行列とも呼ばれ、その名の通り行列に並ぶ事を考えるとイメージしやすいです。 行列においては、先に</description></item><item><title>【アルゴリズム スタック】ざっくりわかるシェルスクリプト１３</title><link>https://suzukiiichiro.github.io/posts/2022-10-06-01-algorithm-stack-suzuki/</link><pubDate>Thu, 06 Oct 2022 11:47:12 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-10-06-01-algorithm-stack-suzuki/</guid><description>スタック スタックはデータ構造の一つです。 スタックの仕組みは、ものを縦に積み上げる事を考えるとイメージしやすいです。 積み上げられた山からものを</description></item><item><title>【アルゴリズム 挿入ソート】ざっくりわかるシェルスクリプト１２</title><link>https://suzukiiichiro.github.io/posts/2022-10-05-01-algorithm-insertionsort-suzuki/</link><pubDate>Wed, 05 Oct 2022 16:36:32 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-10-05-01-algorithm-insertionsort-suzuki/</guid><description>挿入ソート 挿入ソートとは、未整列の要素を一つずつつまみ上げて、整列済みの列の適切な位置に挿入していくアルゴリズムです。 挿入ソートは、選択ソー</description></item><item><title>【アルゴリズム 選択ソート】ざっくりわかるシェルスクリプト１１</title><link>https://suzukiiichiro.github.io/posts/2022-10-05-01-algorithm-selectionsort-suzuki/</link><pubDate>Wed, 05 Oct 2022 14:49:14 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-10-05-01-algorithm-selectionsort-suzuki/</guid><description>選択ソート 選択ソートは、未整列の配列要素の中から最小を選択し、配列先頭の整列済み列の末尾に追加していく並べ替えアルゴリズムです。 バブルソート</description></item><item><title>【アルゴリズム バブルソート】ざっくりわかるシェルスクリプト１０</title><link>https://suzukiiichiro.github.io/posts/2022-10-05-01-algorithm-bubblesort-suzuki/</link><pubDate>Wed, 05 Oct 2022 11:06:56 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-10-05-01-algorithm-bubblesort-suzuki/</guid><description>バブルソート バブルソートは単純選択方法と同様、実現は簡単です。 しかし、比較回数と交換回数は最悪の場合、O(N^2)です。 ソート中に選ばれた最</description></item><item><title>【アルゴリズム ビッグオー】ざっくりわかるシェルスクリプト９</title><link>https://suzukiiichiro.github.io/posts/2022-10-04-01-algorithm-bigo-suzuki/</link><pubDate>Tue, 04 Oct 2022 13:47:09 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-10-04-01-algorithm-bigo-suzuki/</guid><description>Bash/シェルスクリプトで学ぶビッグオー ビッグオーとは？ オーダー記法です。 オーダー記法とは、「計算量の割合」です。 例）Aさんの年齢はｘ歳、</description></item><item><title>【アルゴリズム ２次元配列編】ざっくりわかるシェルスクリプト８</title><link>https://suzukiiichiro.github.io/posts/2022-10-03-01-algorithm-eval-array-suzuki/</link><pubDate>Mon, 03 Oct 2022 15:11:13 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-10-03-01-algorithm-eval-array-suzuki/</guid><description>はじめに さて。 前回の章では、アルゴリズムを勉強していくためのもととなるテンプレートとして、配列に値を入れる仕組みと、配列の中身を表示する仕組</description></item><item><title>【アルゴリズム 配列準備編】ざっくりわかるシェルスクリプト７</title><link>https://suzukiiichiro.github.io/posts/2022-10-03-01-algorithm-array-suzuki/</link><pubDate>Mon, 03 Oct 2022 11:36:10 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-10-03-01-algorithm-array-suzuki/</guid><description>Bashスクリプトで配列の準備 この章では、Bashスクリプトでいくつかのソートアルゴリズムを実行するための、元となるテンプレートを配列で作成</description></item><item><title>【アルゴリズム 配列編】ざっくりわかるシェルスクリプト６</title><link>https://suzukiiichiro.github.io/posts/2022-09-27-01-array-suzuki/</link><pubDate>Tue, 27 Sep 2022 10:31:43 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-09-27-01-array-suzuki/</guid><description>Bashスクリプト（シェルスクリプト） は５０年以上も前からUNIXプログラミングのエッセンスとして君臨し、現在もLinuxのコマンドの殆どを</description></item><item><title>【TIPS】ざっくりわかるシェルスクリプト</title><link>https://suzukiiichiro.github.io/posts/2022-09-26-01-tips-suzuki/</link><pubDate>Mon, 26 Sep 2022 14:19:38 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-09-26-01-tips-suzuki/</guid><description>ここではシェルスクリプトのBashについてのTIPSを紹介します。C言語やJavaといった高級言語にあってbashにはない部分について補完で</description></item><item><title>（２６）【tee】シェルスクリプトコマンド活用紹介</title><link>https://suzukiiichiro.github.io/posts/2022-07-28-01-tee-suzuki/</link><pubDate>Thu, 28 Jul 2022 10:24:32 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-07-28-01-tee-suzuki/</guid><description>teeコマンド ファイルへのリダイレクトとパイプを同時に行う 出力するファイルは都度新規作成ではなく追記する teeコマンド概要 teeコマンドは、</description></item><item><title>（２５）【uniq】シェルスクリプトコマンド活用紹介</title><link>https://suzukiiichiro.github.io/posts/2022-07-27-01-uniq-suzuki/</link><pubDate>Wed, 27 Jul 2022 15:06:47 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-07-27-01-uniq-suzuki/</guid><description>uniqコマンド 重複している行を削除する 大文字／小文字を区別しないで重複行を削除する 重複している行をカウントする uniqコマンド概要 uniq</description></item><item><title>（２５）【rev】シェルスクリプトコマンド活用紹介</title><link>https://suzukiiichiro.github.io/posts/2022-07-26-01-rev-suzuki/</link><pubDate>Tue, 26 Jul 2022 11:11:28 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-07-26-01-rev-suzuki/</guid><description>revコマンド ファイルの各行を反転させる キーボードから入力した内容を反転させる revコマンド概要 reverseの語源を持つ「rev」は、ファ</description></item><item><title>（２４）【tac】シェルスクリプトコマンド活用紹介</title><link>https://suzukiiichiro.github.io/posts/2022-07-26-01-tac-suzuki/</link><pubDate>Tue, 26 Jul 2022 11:10:28 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-07-26-01-tac-suzuki/</guid><description>tacコマンド ファイルを最終行から逆順に出力する tacコマンド概要 catコマンドを逆から読んだ「tac」はファイルの最終行から、行単位に逆順</description></item><item><title>（２３）【seq】シェルスクリプトコマンド活用紹介</title><link>https://suzukiiichiro.github.io/posts/2022-07-26-01-seq-suzuki/</link><pubDate>Tue, 26 Jul 2022 10:40:19 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-07-26-01-seq-suzuki/</guid><description>seqコマンド 連続番号を出力する 開始の数と間隔を指定する 数字を逆順で出力する 書式を指定して出力する seqコマンド概要 sequenceの語源を</description></item><item><title>（２２）【jot】シェルスクリプトコマンド活用紹介</title><link>https://suzukiiichiro.github.io/posts/2022-07-25-01-jot-suzuki/</link><pubDate>Mon, 25 Jul 2022 14:36:44 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-07-25-01-jot-suzuki/</guid><description>jotコマンド 連番を生成する 文字列と組み合わせた連番を作成する printf のフォーマットで出力する 連番の範囲を指定して出力する 乱数を出力する jotコマ</description></item><item><title>（２１）【sort】シェルスクリプトコマンド活用紹介</title><link>https://suzukiiichiro.github.io/posts/2022-07-25-01-sort-suzuki/</link><pubDate>Mon, 25 Jul 2022 12:39:33 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-07-25-01-sort-suzuki/</guid><description>sortコマンド テキストファイルを並べ替える 数値の大小で並べ替える フィールドを指定して並べ替える CSVデータを並べ替える sortコマンド概要</description></item><item><title>（２０）【wc】シェルスクリプトコマンド活用紹介</title><link>https://suzukiiichiro.github.io/posts/2022-07-20-01-wc-suzuki/</link><pubDate>Wed, 20 Jul 2022 11:46:21 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-07-20-01-wc-suzuki/</guid><description>wcコマンド 行数と単語数とバイト数を数える 文字数を数える 行数だけを表示する wcコマンド概要 「wc」はテキストファイルの行数や単語数（word</description></item><item><title>（１９）【tar】シェルスクリプトコマンド活用紹介</title><link>https://suzukiiichiro.github.io/posts/2022-07-20-01-tar-suzuki/</link><pubDate>Wed, 20 Jul 2022 11:34:37 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-07-20-01-tar-suzuki/</guid><description>tarコマンド アーカイブファイルを作成する アーカイブファイルを展開する tarコマンド概要 「tar」は、複数のファイルを1つにまとめた“アーカ</description></item><item><title>（１８）【sed】シェルスクリプトコマンド活用紹介</title><link>https://suzukiiichiro.github.io/posts/2022-07-14-01-sed-suzuki/</link><pubDate>Thu, 14 Jul 2022 15:00:57 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-07-14-01-sed-suzuki/</guid><description>sedコマンド概要 「sed」は「Stream EDitor」の略で、「sed スクリプトコマンド ファイル名」で、指定したファイルをコマンドに従っ</description></item><item><title>（１７）【expand】シェルスクリプトコマンド活用紹介</title><link>https://suzukiiichiro.github.io/posts/2022-07-14-01-expand-suzuki/</link><pubDate>Thu, 14 Jul 2022 13:19:26 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-07-14-01-expand-suzuki/</guid><description>expandコマンド タブを空白に変換する（expandコマンド） タブの幅を指定する expandコマンド概要 「expand」はタブを空白に変換</description></item><item><title>（１６）【cut】シェルスクリプトコマンド活用紹介</title><link>https://suzukiiichiro.github.io/posts/2022-07-14-01-cut-suzuki/</link><pubDate>Thu, 14 Jul 2022 11:19:55 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-07-14-01-cut-suzuki/</guid><description>cutコマンド 文字数を指定して切り出す フィールドを指定して切り出す 出力の区切り文字を変更する cutコマンド概要 「cut」は、ファイルを読み込</description></item><item><title>（１５）【du】シェルスクリプトコマンド活用紹介</title><link>https://suzukiiichiro.github.io/posts/2022-07-13-01-du-suzuki/</link><pubDate>Wed, 13 Jul 2022 13:28:32 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-07-13-01-du-suzuki/</guid><description>duコマンド ディレクトリごとのディスク使用量を表示する ディスク使用量の合計だけを表示する カレントディレクトリ直下のファイル、ディレクトリごと</description></item><item><title>（１４）【df】シェルスクリプトコマンド活用紹介</title><link>https://suzukiiichiro.github.io/posts/2022-07-13-01-df-suzuki/</link><pubDate>Wed, 13 Jul 2022 13:01:11 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-07-13-01-df-suzuki/</guid><description>dfコマンド ディスクの空き容量を調べる dfコマンド概要 「df」は、ディスクの空き領域（freeスペース）のサイズを集計して表示するコマンドで</description></item><item><title>（１３）【tr】シェルスクリプトコマンド活用紹介</title><link>https://suzukiiichiro.github.io/posts/2022-07-08-01-tr-suzuki/</link><pubDate>Fri, 08 Jul 2022 11:17:58 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-07-08-01-tr-suzuki/</guid><description>trコマンド 文字を置換する 大文字／小文字を変換する 改行を除去する 固定長のデータをタブ区切りに変換する／カンマ区切りに変換する trコマンド概要</description></item><item><title>（１２）【nkf】シェルスクリプトコマンド活用紹介</title><link>https://suzukiiichiro.github.io/posts/2022-07-08-01-nkf-suzuki/</link><pubDate>Fri, 08 Jul 2022 10:22:13 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-07-08-01-nkf-suzuki/</guid><description>nkfコマンド 文字コードと改行コードを変換する 文字コードを判定する 文字コードを変換してファイルを書き換える CentOS 7にnkfをインストールするには</description></item><item><title>（１１）【getopts】シェルスクリプトコマンド活用紹介</title><link>https://suzukiiichiro.github.io/posts/2022-07-07-01-getopts-suzuki/</link><pubDate>Thu, 07 Jul 2022 11:27:03 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-07-07-01-getopts-suzuki/</guid><description>getoptsコマンド オプションを解析する エラーメッセージを表示しない 引数付きのオプションを使用する getoptsコマンド概要 「getopt</description></item><item><title>（１０）【chmod】シェルスクリプトコマンド活用紹介</title><link>https://suzukiiichiro.github.io/posts/2022-07-06-01-chmod-suzuki/</link><pubDate>Wed, 06 Jul 2022 10:12:50 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-07-06-01-chmod-suzuki/</guid><description>chmodコマンド パーミッションを表すアルファベットと数値の意味 パーミッションを変更する パーミッションの変更内容を確認するには？ chmodコ</description></item><item><title>（９）【file】シェルスクリプトコマンド活用紹介</title><link>https://suzukiiichiro.github.io/posts/2022-07-05-01-file-suzuki/</link><pubDate>Tue, 05 Jul 2022 10:22:08 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-07-05-01-file-suzuki/</guid><description>fileコマンド ファイルの形式を表示する ファイルのリストから調べる シンボリックリンクの参照先を調べる 圧縮されているファイルを調べる fileコ</description></item><item><title>（８）【grep】シェルスクリプトコマンド活用紹介</title><link>https://suzukiiichiro.github.io/posts/2022-07-04-01-grep-suzuki/</link><pubDate>Mon, 04 Jul 2022 13:21:13 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-07-04-01-grep-suzuki/</guid><description>grepコマンド コマンドの実行結果から必要な箇所だけを抽出する 単語単位で検索する 前後の行も表示する 行番号付きで表示する 複数の文字列を指定して</description></item><item><title>（７）【kill】シェルスクリプトコマンド活用紹介</title><link>https://suzukiiichiro.github.io/posts/2022-02-14-01-kill-suzuki/</link><pubDate>Mon, 14 Feb 2022 11:39:03 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-02-14-01-kill-suzuki/</guid><description>killコマンド killコマンドでプロセスIDを指定してプロセスを終了させる killallコマンドで名前を指定してプロセスを終了させる kil</description></item><item><title>（6）【less】シェルスクリプトコマンド活用紹介</title><link>https://suzukiiichiro.github.io/posts/2022-02-13-01-less-suzuki/</link><pubDate>Sun, 13 Feb 2022 16:35:49 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-02-13-01-less-suzuki/</guid><description>lessコマンド テキストを1画面ずつ表示する キー操作のヘルプを表示する 長い行を折り返さずに表示する ファイルの末尾まで表示したらすぐに終了する</description></item><item><title>（5）【more】シェルスクリプトコマンド活用紹介</title><link>https://suzukiiichiro.github.io/posts/2022-02-13-01-more-suzuki/</link><pubDate>Sun, 13 Feb 2022 16:35:41 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-02-13-01-more-suzuki/</guid><description>moreコマンド 長いメッセージやテキストファイルを1画面ずつ表示する テキストを1画面ずつ止めながら表示する 実行結果を止めながら表示したいとき</description></item><item><title>（４）【tail】シェルスクリプトコマンド活用紹介</title><link>https://suzukiiichiro.github.io/posts/2022-02-11-01-tail-suzuki/</link><pubDate>Fri, 11 Feb 2022 14:31:57 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-02-11-01-tail-suzuki/</guid><description>tailコマンド tailコマンドでファイルの末尾部分だけを表示する ログファイルを監視する ファイルの特定の範囲の行を取り出す（headとtai</description></item><item><title>（３）【head】シェルスクリプトコマンド活用紹介</title><link>https://suzukiiichiro.github.io/posts/2022-02-10-01-head-suzuki/</link><pubDate>Thu, 10 Feb 2022 10:23:14 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-02-10-01-head-suzuki/</guid><description>headコマンド headコマンドでファイルの先頭部分だけを表示する パイプを使って実行結果の最初の部分だけを確認する tailコマンドでファイル</description></item><item><title>（２）【cat】シェルスクリプトコマンド活用紹介</title><link>https://suzukiiichiro.github.io/posts/2022-02-09-01-cat-suzuki/</link><pubDate>Wed, 09 Feb 2022 12:59:39 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-02-09-01-cat-suzuki/</guid><description>catコマンド ファイルの内容を表示する ファイルの内容を行番号付きで表示する 複数ファイルを連結して1つのファイルにする 概要 「cat」は、「co</description></item><item><title>（１）【echo】シェルスクリプトコマンド活用紹介</title><link>https://suzukiiichiro.github.io/posts/2022-02-09-01-echo-suzki/</link><pubDate>Wed, 09 Feb 2022 11:32:07 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-02-09-01-echo-suzki/</guid><description>echoコマンド メッセージや環境変数を表示します。 概要 「echo」はメッセージなどを表示するコマンドです。 $echo メッセージ でメッセージを表示しま</description></item><item><title>【grep/sed/awkも】ざっくりわかるシェルスクリプト５」</title><link>https://suzukiiichiro.github.io/posts/2022-02-02-01-suzuki/</link><pubDate>Wed, 02 Feb 2022 15:55:47 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-02-02-01-suzuki/</guid><description>この記事はシェルスクリプトを４５分でざっくりマスターできるチュートリアルです。bashスクリプト「Hello, World」から、ifステート</description></item><item><title>iPadに開発環境を構築してみるテスト</title><link>https://suzukiiichiro.github.io/posts/2022-01-28-01-suzuki/</link><pubDate>Fri, 28 Jan 2022 14:02:55 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-28-01-suzuki/</guid><description>はじめに まずはこちらをやりましょう。 パソコンは不要。iPhoneやiPadなどのスマホ、タブレットでできるブログ投稿 必要なもの iPad Termiu</description></item><item><title>【grep特集】ざっくりわかるシェルスクリプト４</title><link>https://suzukiiichiro.github.io/posts/2022-01-24-01-suzuki/</link><pubDate>Mon, 24 Jan 2022 10:53:58 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-24-01-suzuki/</guid><description>はじめに grep（グレップ）コマンド。UNIX/Linuxにおいてこれほど歴史あり、強力なコマンドはありません。そして多くのユーザーがこのコ</description></item><item><title>【はじめから】ざっくりわかるシェルスクリプト３</title><link>https://suzukiiichiro.github.io/posts/2022-01-13-01-suzuki/</link><pubDate>Thu, 13 Jan 2022 11:26:13 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-13-01-suzuki/</guid><description>はじめに Bashスクリプトは、シェルコマンドの実行、複数のコマンドの同時実行、管理タスクのカスタマイズ、タスクの自動化の実行など、さまざまな</description></item><item><title>【２０．スクリプトからの戻り値を渡す】ざっくりわかる「シェルスクリプト」</title><link>https://suzukiiichiro.github.io/posts/2022-01-14-20-suzuki/</link><pubDate>Thu, 13 Jan 2022 11:26:13 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-14-20-suzuki/</guid><description>関数からの戻り値の受け渡し 関数からの戻り値の受け渡し： Bash関数は、数値と文字列値の両方を渡すことができます。関数から文字列値を渡す方法を</description></item><item><title>【２１．ディレクトリを作成する】ざっくりわかる「シェルスクリプト」</title><link>https://suzukiiichiro.github.io/posts/2022-01-14-21-suzuki/</link><pubDate>Thu, 13 Jan 2022 11:26:13 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-14-21-suzuki/</guid><description>ディレクトリを作成する ディレクトリを作成する： Bashは「mkdir」コマンドを使用して新しいディレクトリを作成します。&amp;lsquo;mak</description></item><item><title>【２２．存在を確認してディレクトリを作成する】ざっくりわかる「シェルスクリプト」</title><link>https://suzukiiichiro.github.io/posts/2022-01-14-22-suzuki/</link><pubDate>Thu, 13 Jan 2022 11:26:13 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-14-22-suzuki/</guid><description>存在を確認してディレクトリを作成する 存在を確認してディレクトリを作成します。 &amp;lsquo;mkdir&amp;rsquo;コマンドを実行する前に、現</description></item><item><title>【２３．ファイルを読む】ざっくりわかる「シェルスクリプト」</title><link>https://suzukiiichiro.github.io/posts/2022-01-14-23-suzuki/</link><pubDate>Thu, 13 Jan 2022 11:26:13 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-14-23-suzuki/</guid><description>ファイルを読む ファイルを読む： whileループでreadコマンドを使用すると、bashで任意のファイルを1行ずつ読み取ることができます。&amp;l</description></item><item><title>【２４．ファイルを削除する】ざっくりわかる「シェルスクリプト」</title><link>https://suzukiiichiro.github.io/posts/2022-01-14-24-suzuki/</link><pubDate>Thu, 13 Jan 2022 11:26:13 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-14-24-suzuki/</guid><description>ファイルを削除する ファイルを削除します： &amp;lsquo;rm&amp;rsquo;コマンドは、ファイルまたはディレクトリを削除するためのコマンドです。</description></item><item><title>【２５．ファイルに追加】ざっくりわかる「シェルスクリプト」</title><link>https://suzukiiichiro.github.io/posts/2022-01-14-25-suzuki/</link><pubDate>Thu, 13 Jan 2022 11:26:13 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-14-25-suzuki/</guid><description>ファイルに追加 ファイルに追加： bashで「&amp;raquo;」演算子を使用すると、既存のファイルに新しいデータを追加できます。&amp;lsquo;ap</description></item><item><title>【２６．ファイルが存在するかどうかを確認】ざっくりわかる「シェルスクリプト」</title><link>https://suzukiiichiro.github.io/posts/2022-01-14-26-suzuki/</link><pubDate>Thu, 13 Jan 2022 11:26:13 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-14-26-suzuki/</guid><description>ファイルが存在するかどうかを確認 ファイルが存在するかどうかをテストします。 &amp;lsquo;-e&amp;rsquo;または&amp;rsquo;-f&amp;rsqu</description></item><item><title>【２７．mailコマンド】ざっくりわかる「シェルスクリプト」</title><link>https://suzukiiichiro.github.io/posts/2022-01-14-27-suzuki/</link><pubDate>Thu, 13 Jan 2022 11:26:13 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-14-27-suzuki/</guid><description>mailコマンド メールを送る： ' mail &amp;lsquo;または ' sendmail &amp;lsquo;コマンドを使用して電子メールを送信できます。これらのコマンドを使用す</description></item><item><title>【２８．dateコマンド】ざっくりわかる「シェルスクリプト」</title><link>https://suzukiiichiro.github.io/posts/2022-01-14-28-suzuki/</link><pubDate>Thu, 13 Jan 2022 11:26:13 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-14-28-suzuki/</guid><description>dateコマンド 現在の日付を解析する： dateコマンドを使用して、現在のシステムの日付と時刻の値を取得することができます。日付と時刻は、「Y</description></item><item><title>【２９．waitコマンド】ざっくりわかる「シェルスクリプト」</title><link>https://suzukiiichiro.github.io/posts/2022-01-14-29-suzuki/</link><pubDate>Thu, 13 Jan 2022 11:26:13 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-14-29-suzuki/</guid><description>waitコマンド waitコマンド： waitコマンドは、実行中のプロセスの完了を待機するLinuxの組み込みコマンドです。 waitコマンドは、</description></item><item><title>【３０．sleepコマンド】ざっくりわかる「シェルスクリプト」</title><link>https://suzukiiichiro.github.io/posts/2022-01-14-30-suzuki/</link><pubDate>Thu, 13 Jan 2022 11:26:13 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-14-30-suzuki/</guid><description>sleepコマンド sleepコマンド： コマンドの実行を特定の期間一時停止する場合は、sleepコマンドを使用できます。遅延量は、 秒（s）、分</description></item><item><title>【はじめから】ざっくりわかるシェルスクリプト２</title><link>https://suzukiiichiro.github.io/posts/2022-01-12-01-suzuki/</link><pubDate>Wed, 12 Jan 2022 12:30:57 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-12-01-suzuki/</guid><description>はじめに Bashスクリプトは、シェルコマンドの実行、複数のコマンドの同時実行、管理タスクのカスタマイズ、タスクの自動化の実行など、さまざまな</description></item><item><title>【１０．or 条件を if文で使う】ざっくりわかる「シェルスクリプト」</title><link>https://suzukiiichiro.github.io/posts/2022-01-14-10-suzuki/</link><pubDate>Wed, 12 Jan 2022 12:30:57 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-14-10-suzuki/</guid><description>or 条件を if文で使う orロジックでifステートメントを使用する： &amp;lsquo;||&amp;lsquo;は、ifステートメントでorロジックを定義す</description></item><item><title>【１１．else if と else】ざっくりわかる「シェルスクリプト」</title><link>https://suzukiiichiro.github.io/posts/2022-01-14-11-suzuki/</link><pubDate>Wed, 12 Jan 2022 12:30:57 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-14-11-suzuki/</guid><description>else if と else else ifステートメントの使用： else if条件の使用は、bashでは「elif」を定義します。&amp;lsquo;elseif_example.s</description></item><item><title>【１２．case 文】ざっくりわかる「シェルスクリプト」</title><link>https://suzukiiichiro.github.io/posts/2022-01-14-12-suzuki/</link><pubDate>Wed, 12 Jan 2022 12:30:57 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-14-12-suzuki/</guid><description>case 文 caseステートメントの使用： caseステートメントは、if-elseif-elseステートメントの代わりに使用されます。このステートメ</description></item><item><title>【１３．コマンドラインから引数を取得】ざっくりわかる「シェルスクリプト」</title><link>https://suzukiiichiro.github.io/posts/2022-01-14-13-suzuki/</link><pubDate>Wed, 12 Jan 2022 12:30:57 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-14-13-suzuki/</guid><description>コマンドラインから引数を取得 コマンドラインから引数を取得： Bashスクリプトは、他のプログラミング言語と同様に、コマンドライン引数から入力を</description></item><item><title>【１４．名前を使用してコマンドラインから引数を取得する】ざっくりわかる「シェルスクリプト」</title><link>https://suzukiiichiro.github.io/posts/2022-01-14-14-suzuki/</link><pubDate>Wed, 12 Jan 2022 12:30:57 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-14-14-suzuki/</guid><description>名前を使用してコマンドラインから引数を取得する コマンドラインから名前付きの引数を取得： 名前付きのコマンドライン引数を読み取る方法を示します。</description></item><item><title>【１５．変数に2つの文字列を組み合わせる】ざっくりわかる「シェルスクリプト」</title><link>https://suzukiiichiro.github.io/posts/2022-01-14-15-suzuki/</link><pubDate>Wed, 12 Jan 2022 12:30:57 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-14-15-suzuki/</guid><description>変数に2つの文字列を組み合わせる 文字列変数を組み合わせる： 文字列変数はbashで簡単に組み合わせることができます。「string_combi</description></item><item><title>【１６．文字列の部分文字列を取得する】ざっくりわかる「シェルスクリプト」</title><link>https://suzukiiichiro.github.io/posts/2022-01-14-16-suzuki/</link><pubDate>Wed, 12 Jan 2022 12:30:57 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-14-16-suzuki/</guid><description>文字列の部分文字列を取得する 文字列の部分文字列を取得します。 他のプログラミング言語と同様に、bashには文字列データから値を切り取る組み込み</description></item><item><title>【１７．変数に2つの数値を追加します】ざっくりわかる「シェルスクリプト」</title><link>https://suzukiiichiro.github.io/posts/2022-01-14-17-suzuki/</link><pubDate>Wed, 12 Jan 2022 12:30:57 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-14-17-suzuki/</guid><description>変数に2つの数値を追加します 2つの数字を追加します。 さまざまな方法でbashの算術演算を実行できます。次のスクリプトに、二重角かっこを使用し</description></item><item><title>【１８．関数を作成する】ざっくりわかる「シェルスクリプト」</title><link>https://suzukiiichiro.github.io/posts/2022-01-14-18-suzuki/</link><pubDate>Wed, 12 Jan 2022 12:30:57 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-14-18-suzuki/</guid><description>関連記事 ざっくりわかるシェルスクリプト１」 ざっくりわかるシェルスクリプト２」 ざっくりわかるシェルスクリプト３」 関数を作成する 関数の作成： 簡単</description></item><item><title>【１９．関数パラメーターを使用する】ざっくりわかる「シェルスクリプト」</title><link>https://suzukiiichiro.github.io/posts/2022-01-14-19-suzuki/</link><pubDate>Wed, 12 Jan 2022 12:30:57 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-14-19-suzuki/</guid><description>関数パラメーターを使用する パラメータを使用して関数を作成します。 Bashは、関数宣言時に関数パラメーターまたは引数を宣言できません。ただし、</description></item><item><title>【はじめから】ざっくりわかるシェルスクリプト１」</title><link>https://suzukiiichiro.github.io/posts/2022-01-07-01-suzuki/</link><pubDate>Fri, 07 Jan 2022 10:03:12 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-07-01-suzuki/</guid><description>はじめに Bashスクリプトは、シェルコマンドの実行、複数のコマンドの同時実行、管理タスクのカスタマイズ、タスクの自動化の実行など、さまざまな</description></item><item><title>【１．Hello World】ざっくりわかる「シェルスクリプト」</title><link>https://suzukiiichiro.github.io/posts/2022-01-14-01-suzuki/</link><pubDate>Fri, 07 Jan 2022 10:03:12 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-14-01-suzuki/</guid><description>Hello World はじめてのbashコマンド「echo」 ターミナルで非常に単純なbashステートメントを実行します。 コマンドの出力は「Hello, Worl</description></item><item><title>【２．echo コマンド】ざっくりわかる「シェルスクリプト」</title><link>https://suzukiiichiro.github.io/posts/2022-01-14-02-suzuki/</link><pubDate>Fri, 07 Jan 2022 10:03:12 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-14-02-suzuki/</guid><description>echo コマンド echoコマンドの使用： さまざまなオプションでechoコマンドを使用できます。 次の例では、いくつかの便利なオプションについて説明し</description></item><item><title>【３．コメント】ざっくりわかる「シェルスクリプト」</title><link>https://suzukiiichiro.github.io/posts/2022-01-14-03-suzuki/</link><pubDate>Fri, 07 Jan 2022 10:03:12 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-14-03-suzuki/</guid><description>コメント コメントの使用 「#」記号は、bashスクリプトに1行コメントを追加するために使用されます。 &amp;lsquo;comment_exampl</description></item><item><title>【４．マルチラインコメント】ざっくりわかる「シェルスクリプト」</title><link>https://suzukiiichiro.github.io/posts/2022-01-14-04-suzuki/</link><pubDate>Fri, 07 Jan 2022 10:03:12 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-14-04-suzuki/</guid><description>マルチラインコメント 複数行コメントの使用 bashではさまざまな方法で複数行コメントを使用できます。 次の例に簡単な方法を示します。 &amp;lsquo</description></item><item><title>【５．while ループ】ざっくりわかる「シェルスクリプト」</title><link>https://suzukiiichiro.github.io/posts/2022-01-14-05-suzuki/</link><pubDate>Fri, 07 Jan 2022 10:03:12 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-14-05-suzuki/</guid><description>while ループ whileループの使用 whileループの使用法を知るために、「while_example.sh」という名前のbashファイルを作成し</description></item><item><title>【６．for ループ】ざっくりわかる「シェルスクリプト」</title><link>https://suzukiiichiro.github.io/posts/2022-01-14-06-suzuki/</link><pubDate>Fri, 07 Jan 2022 10:03:12 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-14-06-suzuki/</guid><description>for ループ forループの使用 基本的なforループ宣言を示します。 &amp;lsquo;for_example.sh&amp;rsquo;という名前のファイルを</description></item><item><title>【７．対話型入力】ざっくりわかる「シェルスクリプト」</title><link>https://suzukiiichiro.github.io/posts/2022-01-14-07-suzuki/</link><pubDate>Fri, 07 Jan 2022 10:03:12 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-14-07-suzuki/</guid><description>対話型入力 ユーザー入力の取得 &amp;lsquo;read&amp;rsquo;コマンドは、bashでユーザーから入力を受け取るために使用されます。 &amp;lsq</description></item><item><title>【８．If 文】ざっくりわかる「シェルスクリプト」</title><link>https://suzukiiichiro.github.io/posts/2022-01-14-08-suzuki/</link><pubDate>Fri, 07 Jan 2022 10:03:12 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-14-08-suzuki/</guid><description>if 文 if文を使う 単数、または複数の条件でif条件を使用できます。 このステートメントの開始ブロックと終了ブロックは、「if」と「fi」で定義さ</description></item><item><title>【９．and 条件を if 文で使う】ざっくりわかる「シェルスクリプト」</title><link>https://suzukiiichiro.github.io/posts/2022-01-14-09-suzuki/</link><pubDate>Fri, 07 Jan 2022 10:03:12 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-14-09-suzuki/</guid><description>and 条件を if 文で使う ANDロジックでifステートメントを使用する： 2つ以上の条件を持つifステートメントでは、さまざまなタイプの論理条件を使用</description></item><item><title>シェルスクリプトをつかって、hugoで楽ちんにファイルを作成して編集できないかっていうはなし</title><link>https://suzukiiichiro.github.io/posts/2022-01-06-01-suzuki/</link><pubDate>Thu, 06 Jan 2022 14:21:51 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2022-01-06-01-suzuki/</guid><description>はじめに ここでは、hugoコマンドでnewする時に指定するファイル名を、シェルスクリプトを使ってなるべく簡便にあてはめてファイル生成しようと</description></item><item><title>【ssh/Bash】sshでログインして実行して自動的に抜けて返ってくる最も簡単な方法</title><link>https://suzukiiichiro.github.io/posts/2021-12-24-01-suzuki/</link><pubDate>Fri, 24 Dec 2021 11:55:21 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2021-12-24-01-suzuki/</guid><description>やりたいこと sshでサーバーにログインして、なんらかのコマンドを実行しターミナルに表示、ミッション終了後、ターミナルを自動的にログアウトして</description></item><item><title>【プログレスバー】Bashでプログレスバーを作ってみようって話</title><link>https://suzukiiichiro.github.io/posts/2021-12-23-03-suzuki/</link><pubDate>Thu, 23 Dec 2021 16:10:20 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2021-12-23-03-suzuki/</guid><description>プログレスバー ターミナルで、処理の進捗が表示されるプログレスバーというのがあります。 処理が進むにつれて、ジリジリとメーターが右に増えていくあ</description></item><item><title>【unComp】Bashで便利なコマンドを作ってみようって話</title><link>https://suzukiiichiro.github.io/posts/2021-12-25-01-suzuki/</link><pubDate>Thu, 23 Dec 2021 13:11:13 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2021-12-25-01-suzuki/</guid><description>できること 圧縮されているファイルを、ファイルの拡張子にあわせて解凍すると言う作業は、日常的に多いものです。今回は、圧縮ファイルの拡張子を判断</description></item><item><title>【wLu】Bashで便利なコマンドを作ってみようって話</title><link>https://suzukiiichiro.github.io/posts/2021-12-23-suzuki/</link><pubDate>Thu, 23 Dec 2021 10:27:27 +0900</pubDate><guid>https://suzukiiichiro.github.io/posts/2021-12-23-suzuki/</guid><description>必要なもの ネットワーク漢字フィルター nkf ※macの場合、Homebrew が必要になります。 nkf インストールの手順 まず、nkfがインストールされて</description></item></channel></rss>